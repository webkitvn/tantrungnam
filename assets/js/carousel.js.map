{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/utils.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Alignment.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/EventStore.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Animations.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Axis.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Limit.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Counter.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/DragHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/DragTracker.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/NodeRects.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/PercentOfView.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ResizeHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollBody.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollBounds.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollContain.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollLimit.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollLooper.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollProgress.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollSnaps.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlideRegistry.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollTarget.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/ScrollTo.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlideFocus.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Vector1d.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Translate.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlideLooper.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlidesHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlidesInView.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlideSizes.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/SlidesToScroll.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Engine.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/EventHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/Options.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/OptionsHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/PluginsHandler.ts", "../../node_modules/.pnpm/embla-carousel@8.6.0/node_modules/embla-carousel/src/components/EmblaCarousel.ts", "../../node_modules/.pnpm/embla-carousel-autoplay@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-autoplay/src/components/Options.ts", "../../node_modules/.pnpm/embla-carousel-autoplay@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-autoplay/src/components/utils.ts", "../../node_modules/.pnpm/embla-carousel-autoplay@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-autoplay/src/components/Autoplay.ts", "../../node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/src/components/Options.ts", "../../node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/src/components/utils.ts", "../../node_modules/.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/src/components/ClassNames.ts", "../../src/js/carousel.js"],
  "sourcesContent": ["import { PointerEventType } from './DragTracker'\n\nexport type WindowType = Window & typeof globalThis\n\nexport function isNumber(subject: unknown): subject is number {\n  return typeof subject === 'number'\n}\n\nexport function isString(subject: unknown): subject is string {\n  return typeof subject === 'string'\n}\n\nexport function isBoolean(subject: unknown): subject is boolean {\n  return typeof subject === 'boolean'\n}\n\nexport function isObject(subject: unknown): subject is Record<string, unknown> {\n  return Object.prototype.toString.call(subject) === '[object Object]'\n}\n\nexport function mathAbs(n: number): number {\n  return Math.abs(n)\n}\n\nexport function mathSign(n: number): number {\n  return Math.sign(n)\n}\n\nexport function deltaAbs(valueB: number, valueA: number): number {\n  return mathAbs(valueB - valueA)\n}\n\nexport function factorAbs(valueB: number, valueA: number): number {\n  if (valueB === 0 || valueA === 0) return 0\n  if (mathAbs(valueB) <= mathAbs(valueA)) return 0\n  const diff = deltaAbs(mathAbs(valueB), mathAbs(valueA))\n  return mathAbs(diff / valueB)\n}\n\nexport function roundToTwoDecimals(num: number): number {\n  return Math.round(num * 100) / 100\n}\n\nexport function arrayKeys<Type>(array: Type[]): number[] {\n  return objectKeys(array).map(Number)\n}\n\nexport function arrayLast<Type>(array: Type[]): Type {\n  return array[arrayLastIndex(array)]\n}\n\nexport function arrayLastIndex<Type>(array: Type[]): number {\n  return Math.max(0, array.length - 1)\n}\n\nexport function arrayIsLastIndex<Type>(array: Type[], index: number): boolean {\n  return index === arrayLastIndex(array)\n}\n\nexport function arrayFromNumber(n: number, startAt: number = 0): number[] {\n  return Array.from(Array(n), (_, i) => startAt + i)\n}\n\nexport function objectKeys<Type extends object>(object: Type): string[] {\n  return Object.keys(object)\n}\n\nexport function objectsMergeDeep(\n  objectA: Record<string, unknown>,\n  objectB: Record<string, unknown>\n): Record<string, unknown> {\n  return [objectA, objectB].reduce((mergedObjects, currentObject) => {\n    objectKeys(currentObject).forEach((key) => {\n      const valueA = mergedObjects[key]\n      const valueB = currentObject[key]\n      const areObjects = isObject(valueA) && isObject(valueB)\n\n      mergedObjects[key] = areObjects\n        ? objectsMergeDeep(valueA, valueB)\n        : valueB\n    })\n    return mergedObjects\n  }, {})\n}\n\nexport function isMouseEvent(\n  evt: PointerEventType,\n  ownerWindow: WindowType\n): evt is MouseEvent {\n  return (\n    typeof ownerWindow.MouseEvent !== 'undefined' &&\n    evt instanceof ownerWindow.MouseEvent\n  )\n}\n", "import { isString } from './utils'\n\nexport type AlignmentOptionType =\n  | 'start'\n  | 'center'\n  | 'end'\n  | ((viewSize: number, snapSize: number, index: number) => number)\n\nexport type AlignmentType = {\n  measure: (n: number, index: number) => number\n}\n\nexport function Alignment(\n  align: AlignmentOptionType,\n  viewSize: number\n): AlignmentType {\n  const predefined = { start, center, end }\n\n  function start(): number {\n    return 0\n  }\n\n  function center(n: number): number {\n    return end(n) / 2\n  }\n\n  function end(n: number): number {\n    return viewSize - n\n  }\n\n  function measure(n: number, index: number): number {\n    if (isString(align)) return predefined[align](n)\n    return align(viewSize, n, index)\n  }\n\n  const self: AlignmentType = {\n    measure\n  }\n  return self\n}\n", "type EventNameType = keyof DocumentEventMap | keyof WindowEventMap\ntype EventHandlerType = (evt: any) => void\ntype EventOptionsType = boolean | AddEventListenerOptions | undefined\ntype EventRemoverType = () => void\n\nexport type EventStoreType = {\n  add: (\n    node: EventTarget,\n    type: EventNameType,\n    handler: EventHandlerType,\n    options?: EventOptionsType\n  ) => EventStoreType\n  clear: () => void\n}\n\nexport function EventStore(): EventStoreType {\n  let listeners: EventRemoverType[] = []\n\n  function add(\n    node: EventTarget,\n    type: EventNameType,\n    handler: EventHandlerType,\n    options: EventOptionsType = { passive: true }\n  ): EventStoreType {\n    let removeListener: EventRemoverType\n\n    if ('addEventListener' in node) {\n      node.addEventListener(type, handler, options)\n      removeListener = () => node.removeEventListener(type, handler, options)\n    } else {\n      const legacyMediaQueryList = <MediaQueryList>node\n      legacyMediaQueryList.addListener(handler)\n      removeListener = () => legacyMediaQueryList.removeListener(handler)\n    }\n\n    listeners.push(removeListener)\n    return self\n  }\n\n  function clear(): void {\n    listeners = listeners.filter((remove) => remove())\n  }\n\n  const self: EventStoreType = {\n    add,\n    clear\n  }\n  return self\n}\n", "import { EngineType } from './Engine'\nimport { EventStore } from './EventStore'\nimport { WindowType } from './utils'\n\nexport type AnimationsUpdateType = (engine: EngineType) => void\nexport type AnimationsRenderType = (engine: EngineType, alpha: number) => void\n\nexport type AnimationsType = {\n  init: () => void\n  destroy: () => void\n  start: () => void\n  stop: () => void\n  update: () => void\n  render: (alpha: number) => void\n}\n\nexport function Animations(\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  update: () => void,\n  render: (alpha: number) => void\n): AnimationsType {\n  const documentVisibleHandler = EventStore()\n  const fixedTimeStep = 1000 / 60\n\n  let lastTimeStamp: number | null = null\n  let accumulatedTime = 0\n  let animationId = 0\n\n  function init(): void {\n    documentVisibleHandler.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.hidden) reset()\n    })\n  }\n\n  function destroy(): void {\n    stop()\n    documentVisibleHandler.clear()\n  }\n\n  function animate(timeStamp: DOMHighResTimeStamp): void {\n    if (!animationId) return\n    if (!lastTimeStamp) {\n      lastTimeStamp = timeStamp\n      update()\n      update()\n    }\n\n    const timeElapsed = timeStamp - lastTimeStamp\n    lastTimeStamp = timeStamp\n    accumulatedTime += timeElapsed\n\n    while (accumulatedTime >= fixedTimeStep) {\n      update()\n      accumulatedTime -= fixedTimeStep\n    }\n\n    const alpha = accumulatedTime / fixedTimeStep\n    render(alpha)\n\n    if (animationId) {\n      animationId = ownerWindow.requestAnimationFrame(animate)\n    }\n  }\n\n  function start(): void {\n    if (animationId) return\n    animationId = ownerWindow.requestAnimationFrame(animate)\n  }\n\n  function stop(): void {\n    ownerWindow.cancelAnimationFrame(animationId)\n    lastTimeStamp = null\n    accumulatedTime = 0\n    animationId = 0\n  }\n\n  function reset(): void {\n    lastTimeStamp = null\n    accumulatedTime = 0\n  }\n\n  const self: AnimationsType = {\n    init,\n    destroy,\n    start,\n    stop,\n    update,\n    render\n  }\n  return self\n}\n", "import { NodeRectType } from './NodeRects'\n\nexport type AxisOptionType = 'x' | 'y'\nexport type AxisDirectionOptionType = 'ltr' | 'rtl'\ntype AxisEdgeType = 'top' | 'right' | 'bottom' | 'left'\n\nexport type AxisType = {\n  scroll: AxisOptionType\n  cross: AxisOptionType\n  startEdge: AxisEdgeType\n  endEdge: AxisEdgeType\n  measureSize: (nodeRect: NodeRectType) => number\n  direction: (n: number) => number\n}\n\nexport function Axis(\n  axis: AxisOptionType,\n  contentDirection: AxisDirectionOptionType\n): AxisType {\n  const isRightToLeft = contentDirection === 'rtl'\n  const isVertical = axis === 'y'\n  const scroll = isVertical ? 'y' : 'x'\n  const cross = isVertical ? 'x' : 'y'\n  const sign = !isVertical && isRightToLeft ? -1 : 1\n  const startEdge = getStartEdge()\n  const endEdge = getEndEdge()\n\n  function measureSize(nodeRect: NodeRectType): number {\n    const { height, width } = nodeRect\n    return isVertical ? height : width\n  }\n\n  function getStartEdge(): AxisEdgeType {\n    if (isVertical) return 'top'\n    return isRightToLeft ? 'right' : 'left'\n  }\n\n  function getEndEdge(): AxisEdgeType {\n    if (isVertical) return 'bottom'\n    return isRightToLeft ? 'left' : 'right'\n  }\n\n  function direction(n: number): number {\n    return n * sign\n  }\n\n  const self: AxisType = {\n    scroll,\n    cross,\n    startEdge,\n    endEdge,\n    measureSize,\n    direction\n  }\n  return self\n}\n", "import { mathAbs } from './utils'\n\nexport type LimitType = {\n  min: number\n  max: number\n  length: number\n  constrain: (n: number) => number\n  reachedAny: (n: number) => boolean\n  reachedMax: (n: number) => boolean\n  reachedMin: (n: number) => boolean\n  removeOffset: (n: number) => number\n}\n\nexport function Limit(min: number = 0, max: number = 0): LimitType {\n  const length = mathAbs(min - max)\n\n  function reachedMin(n: number): boolean {\n    return n < min\n  }\n\n  function reachedMax(n: number): boolean {\n    return n > max\n  }\n\n  function reachedAny(n: number): boolean {\n    return reachedMin(n) || reachedMax(n)\n  }\n\n  function constrain(n: number): number {\n    if (!reachedAny(n)) return n\n    return reachedMin(n) ? min : max\n  }\n\n  function removeOffset(n: number): number {\n    if (!length) return n\n    return n - length * Math.ceil((n - max) / length)\n  }\n\n  const self: LimitType = {\n    length,\n    max,\n    min,\n    constrain,\n    reachedAny,\n    reachedMax,\n    reachedMin,\n    removeOffset\n  }\n  return self\n}\n", "import { Limit } from './Limit'\nimport { mathAbs } from './utils'\n\nexport type CounterType = {\n  get: () => number\n  set: (n: number) => CounterType\n  add: (n: number) => CounterType\n  clone: () => CounterType\n}\n\nexport function Counter(\n  max: number,\n  start: number,\n  loop: boolean\n): CounterType {\n  const { constrain } = Limit(0, max)\n  const loopEnd = max + 1\n  let counter = withinLimit(start)\n\n  function withinLimit(n: number): number {\n    return !loop ? constrain(n) : mathAbs((loopEnd + n) % loopEnd)\n  }\n\n  function get(): number {\n    return counter\n  }\n\n  function set(n: number): CounterType {\n    counter = withinLimit(n)\n    return self\n  }\n\n  function add(n: number): CounterType {\n    return clone().set(get() + n)\n  }\n\n  function clone(): CounterType {\n    return Counter(max, get(), loop)\n  }\n\n  const self: CounterType = {\n    get,\n    set,\n    add,\n    clone\n  }\n  return self\n}\n", "import { EmblaCarouselType } from './EmblaCarousel'\nimport { AnimationsType } from './Animations'\nimport { CounterType } from './Counter'\nimport { DragTrackerType, PointerEventType } from './DragTracker'\nimport { EventHandlerType } from './EventHandler'\nimport { AxisType } from './Axis'\nimport { EventStore } from './EventStore'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollTargetType } from './ScrollTarget'\nimport { ScrollToType } from './ScrollTo'\nimport { Vector1DType } from './Vector1d'\nimport { PercentOfViewType } from './PercentOfView'\nimport { Limit } from './Limit'\nimport {\n  deltaAbs,\n  factorAbs,\n  isBoolean,\n  isMouseEvent,\n  mathAbs,\n  mathSign,\n  WindowType\n} from './utils'\n\ntype DragHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  evt: PointerEventType\n) => boolean | void\n\nexport type DragHandlerOptionType = boolean | DragHandlerCallbackType\n\nexport type DragHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n  pointerDown: () => boolean\n}\n\nexport function DragHandler(\n  axis: AxisType,\n  rootNode: HTMLElement,\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  target: Vector1DType,\n  dragTracker: DragTrackerType,\n  location: Vector1DType,\n  animation: AnimationsType,\n  scrollTo: ScrollToType,\n  scrollBody: ScrollBodyType,\n  scrollTarget: ScrollTargetType,\n  index: CounterType,\n  eventHandler: EventHandlerType,\n  percentOfView: PercentOfViewType,\n  dragFree: boolean,\n  dragThreshold: number,\n  skipSnaps: boolean,\n  baseFriction: number,\n  watchDrag: DragHandlerOptionType\n): DragHandlerType {\n  const { cross: crossAxis, direction } = axis\n  const focusNodes = ['INPUT', 'SELECT', 'TEXTAREA']\n  const nonPassiveEvent = { passive: false }\n  const initEvents = EventStore()\n  const dragEvents = EventStore()\n  const goToNextThreshold = Limit(50, 225).constrain(percentOfView.measure(20))\n  const snapForceBoost = { mouse: 300, touch: 400 }\n  const freeForceBoost = { mouse: 500, touch: 600 }\n  const baseSpeed = dragFree ? 43 : 25\n\n  let isMoving = false\n  let startScroll = 0\n  let startCross = 0\n  let pointerIsDown = false\n  let preventScroll = false\n  let preventClick = false\n  let isMouse = false\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchDrag) return\n\n    function downIfAllowed(evt: PointerEventType): void {\n      if (isBoolean(watchDrag) || watchDrag(emblaApi, evt)) down(evt)\n    }\n\n    const node = rootNode\n    initEvents\n      .add(node, 'dragstart', (evt) => evt.preventDefault(), nonPassiveEvent)\n      .add(node, 'touchmove', () => undefined, nonPassiveEvent)\n      .add(node, 'touchend', () => undefined)\n      .add(node, 'touchstart', downIfAllowed)\n      .add(node, 'mousedown', downIfAllowed)\n      .add(node, 'touchcancel', up)\n      .add(node, 'contextmenu', up)\n      .add(node, 'click', click, true)\n  }\n\n  function destroy(): void {\n    initEvents.clear()\n    dragEvents.clear()\n  }\n\n  function addDragEvents(): void {\n    const node = isMouse ? ownerDocument : rootNode\n    dragEvents\n      .add(node, 'touchmove', move, nonPassiveEvent)\n      .add(node, 'touchend', up)\n      .add(node, 'mousemove', move, nonPassiveEvent)\n      .add(node, 'mouseup', up)\n  }\n\n  function isFocusNode(node: Element): boolean {\n    const nodeName = node.nodeName || ''\n    return focusNodes.includes(nodeName)\n  }\n\n  function forceBoost(): number {\n    const boost = dragFree ? freeForceBoost : snapForceBoost\n    const type = isMouse ? 'mouse' : 'touch'\n    return boost[type]\n  }\n\n  function allowedForce(force: number, targetChanged: boolean): number {\n    const next = index.add(mathSign(force) * -1)\n    const baseForce = scrollTarget.byDistance(force, !dragFree).distance\n\n    if (dragFree || mathAbs(force) < goToNextThreshold) return baseForce\n    if (skipSnaps && targetChanged) return baseForce * 0.5\n\n    return scrollTarget.byIndex(next.get(), 0).distance\n  }\n\n  function down(evt: PointerEventType): void {\n    const isMouseEvt = isMouseEvent(evt, ownerWindow)\n    isMouse = isMouseEvt\n    preventClick = dragFree && isMouseEvt && !evt.buttons && isMoving\n    isMoving = deltaAbs(target.get(), location.get()) >= 2\n\n    if (isMouseEvt && evt.button !== 0) return\n    if (isFocusNode(evt.target as Element)) return\n\n    pointerIsDown = true\n    dragTracker.pointerDown(evt)\n    scrollBody.useFriction(0).useDuration(0)\n    target.set(location)\n    addDragEvents()\n    startScroll = dragTracker.readPoint(evt)\n    startCross = dragTracker.readPoint(evt, crossAxis)\n    eventHandler.emit('pointerDown')\n  }\n\n  function move(evt: PointerEventType): void {\n    const isTouchEvt = !isMouseEvent(evt, ownerWindow)\n    if (isTouchEvt && evt.touches.length >= 2) return up(evt)\n\n    const lastScroll = dragTracker.readPoint(evt)\n    const lastCross = dragTracker.readPoint(evt, crossAxis)\n    const diffScroll = deltaAbs(lastScroll, startScroll)\n    const diffCross = deltaAbs(lastCross, startCross)\n\n    if (!preventScroll && !isMouse) {\n      if (!evt.cancelable) return up(evt)\n      preventScroll = diffScroll > diffCross\n      if (!preventScroll) return up(evt)\n    }\n    const diff = dragTracker.pointerMove(evt)\n    if (diffScroll > dragThreshold) preventClick = true\n\n    scrollBody.useFriction(0.3).useDuration(0.75)\n    animation.start()\n    target.add(direction(diff))\n    evt.preventDefault()\n  }\n\n  function up(evt: PointerEventType): void {\n    const currentLocation = scrollTarget.byDistance(0, false)\n    const targetChanged = currentLocation.index !== index.get()\n    const rawForce = dragTracker.pointerUp(evt) * forceBoost()\n    const force = allowedForce(direction(rawForce), targetChanged)\n    const forceFactor = factorAbs(rawForce, force)\n    const speed = baseSpeed - 10 * forceFactor\n    const friction = baseFriction + forceFactor / 50\n\n    preventScroll = false\n    pointerIsDown = false\n    dragEvents.clear()\n    scrollBody.useDuration(speed).useFriction(friction)\n    scrollTo.distance(force, !dragFree)\n    isMouse = false\n    eventHandler.emit('pointerUp')\n  }\n\n  function click(evt: MouseEvent): void {\n    if (preventClick) {\n      evt.stopPropagation()\n      evt.preventDefault()\n      preventClick = false\n    }\n  }\n\n  function pointerDown(): boolean {\n    return pointerIsDown\n  }\n\n  const self: DragHandlerType = {\n    init,\n    destroy,\n    pointerDown\n  }\n  return self\n}\n", "import { AxisOptionType, AxisType } from './Axis'\nimport { isMouseEvent, mathAbs, WindowType } from './utils'\n\ntype PointerCoordType = keyof Touch | keyof MouseEvent\nexport type PointerEventType = TouchEvent | MouseEvent\n\nexport type DragTrackerType = {\n  pointerDown: (evt: PointerEventType) => number\n  pointerMove: (evt: PointerEventType) => number\n  pointerUp: (evt: PointerEventType) => number\n  readPoint: (evt: PointerEventType, evtAxis?: AxisOptionType) => number\n}\n\nexport function DragTracker(\n  axis: AxisType,\n  ownerWindow: WindowType\n): DragTrackerType {\n  const logInterval = 170\n\n  let startEvent: PointerEventType\n  let lastEvent: PointerEventType\n\n  function readTime(evt: PointerEventType): number {\n    return evt.timeStamp\n  }\n\n  function readPoint(evt: PointerEventType, evtAxis?: AxisOptionType): number {\n    const property = evtAxis || axis.scroll\n    const coord: PointerCoordType = `client${property === 'x' ? 'X' : 'Y'}`\n    return (isMouseEvent(evt, ownerWindow) ? evt : evt.touches[0])[coord]\n  }\n\n  function pointerDown(evt: PointerEventType): number {\n    startEvent = evt\n    lastEvent = evt\n    return readPoint(evt)\n  }\n\n  function pointerMove(evt: PointerEventType): number {\n    const diff = readPoint(evt) - readPoint(lastEvent)\n    const expired = readTime(evt) - readTime(startEvent) > logInterval\n\n    lastEvent = evt\n    if (expired) startEvent = evt\n    return diff\n  }\n\n  function pointerUp(evt: PointerEventType): number {\n    if (!startEvent || !lastEvent) return 0\n    const diffDrag = readPoint(lastEvent) - readPoint(startEvent)\n    const diffTime = readTime(evt) - readTime(startEvent)\n    const expired = readTime(evt) - readTime(lastEvent) > logInterval\n    const force = diffDrag / diffTime\n    const isFlick = diffTime && !expired && mathAbs(force) > 0.1\n\n    return isFlick ? force : 0\n  }\n\n  const self: DragTrackerType = {\n    pointerDown,\n    pointerMove,\n    pointerUp,\n    readPoint\n  }\n  return self\n}\n", "export type NodeRectType = {\n  top: number\n  right: number\n  bottom: number\n  left: number\n  width: number\n  height: number\n}\n\nexport type NodeRectsType = {\n  measure: (node: HTMLElement) => NodeRectType\n}\n\nexport function NodeRects(): NodeRectsType {\n  function measure(node: HTMLElement): NodeRectType {\n    const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = node\n    const offset: NodeRectType = {\n      top: offsetTop,\n      right: offsetLeft + offsetWidth,\n      bottom: offsetTop + offsetHeight,\n      left: offsetLeft,\n      width: offsetWidth,\n      height: offsetHeight\n    }\n\n    return offset\n  }\n\n  const self: NodeRectsType = {\n    measure\n  }\n  return self\n}\n", "export type PercentOfViewType = {\n  measure: (n: number) => number\n}\n\nexport function PercentOfView(viewSize: number): PercentOfViewType {\n  function measure(n: number): number {\n    return viewSize * (n / 100)\n  }\n\n  const self: PercentOfViewType = {\n    measure\n  }\n  return self\n}\n", "import { AxisType } from './Axis'\nimport { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { NodeRectsType } from './NodeRects'\nimport { isBoolean, mathAbs, WindowType } from './utils'\n\ntype ResizeHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  entries: ResizeObserverEntry[]\n) => boolean | void\n\nexport type ResizeHandlerOptionType = boolean | ResizeHandlerCallbackType\n\nexport type ResizeHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n}\n\nexport function ResizeHandler(\n  container: HTMLElement,\n  eventHandler: EventHandlerType,\n  ownerWindow: WindowType,\n  slides: HTMLElement[],\n  axis: AxisType,\n  watchResize: ResizeHandlerOptionType,\n  nodeRects: NodeRectsType\n): ResizeHandlerType {\n  const observeNodes = [container].concat(slides)\n  let resizeObserver: ResizeObserver\n  let containerSize: number\n  let slideSizes: number[] = []\n  let destroyed = false\n\n  function readSize(node: HTMLElement): number {\n    return axis.measureSize(nodeRects.measure(node))\n  }\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchResize) return\n\n    containerSize = readSize(container)\n    slideSizes = slides.map(readSize)\n\n    function defaultCallback(entries: ResizeObserverEntry[]): void {\n      for (const entry of entries) {\n        if (destroyed) return\n\n        const isContainer = entry.target === container\n        const slideIndex = slides.indexOf(<HTMLElement>entry.target)\n        const lastSize = isContainer ? containerSize : slideSizes[slideIndex]\n        const newSize = readSize(isContainer ? container : slides[slideIndex])\n        const diffSize = mathAbs(newSize - lastSize)\n\n        if (diffSize >= 0.5) {\n          emblaApi.reInit()\n          eventHandler.emit('resize')\n\n          break\n        }\n      }\n    }\n\n    resizeObserver = new ResizeObserver((entries) => {\n      if (isBoolean(watchResize) || watchResize(emblaApi, entries)) {\n        defaultCallback(entries)\n      }\n    })\n\n    ownerWindow.requestAnimationFrame(() => {\n      observeNodes.forEach((node) => resizeObserver.observe(node))\n    })\n  }\n\n  function destroy(): void {\n    destroyed = true\n    if (resizeObserver) resizeObserver.disconnect()\n  }\n\n  const self: ResizeHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n", "import { mathSign, mathAbs } from './utils'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollBodyType = {\n  direction: () => number\n  duration: () => number\n  velocity: () => number\n  seek: () => ScrollBodyType\n  settled: () => boolean\n  useBaseFriction: () => ScrollBodyType\n  useBaseDuration: () => ScrollBodyType\n  useFriction: (n: number) => ScrollBodyType\n  useDuration: (n: number) => ScrollBodyType\n}\n\nexport function ScrollBody(\n  location: Vector1DType,\n  offsetLocation: Vector1DType,\n  previousLocation: Vector1DType,\n  target: Vector1DType,\n  baseDuration: number,\n  baseFriction: number\n): ScrollBodyType {\n  let scrollVelocity = 0\n  let scrollDirection = 0\n  let scrollDuration = baseDuration\n  let scrollFriction = baseFriction\n  let rawLocation = location.get()\n  let rawLocationPrevious = 0\n\n  function seek(): ScrollBodyType {\n    const displacement = target.get() - location.get()\n    const isInstant = !scrollDuration\n    let scrollDistance = 0\n\n    if (isInstant) {\n      scrollVelocity = 0\n      previousLocation.set(target)\n      location.set(target)\n\n      scrollDistance = displacement\n    } else {\n      previousLocation.set(location)\n\n      scrollVelocity += displacement / scrollDuration\n      scrollVelocity *= scrollFriction\n      rawLocation += scrollVelocity\n      location.add(scrollVelocity)\n\n      scrollDistance = rawLocation - rawLocationPrevious\n    }\n\n    scrollDirection = mathSign(scrollDistance)\n    rawLocationPrevious = rawLocation\n    return self\n  }\n\n  function settled(): boolean {\n    const diff = target.get() - offsetLocation.get()\n    return mathAbs(diff) < 0.001\n  }\n\n  function duration(): number {\n    return scrollDuration\n  }\n\n  function direction(): number {\n    return scrollDirection\n  }\n\n  function velocity(): number {\n    return scrollVelocity\n  }\n\n  function useBaseDuration(): ScrollBodyType {\n    return useDuration(baseDuration)\n  }\n\n  function useBaseFriction(): ScrollBodyType {\n    return useFriction(baseFriction)\n  }\n\n  function useDuration(n: number): ScrollBodyType {\n    scrollDuration = n\n    return self\n  }\n\n  function useFriction(n: number): ScrollBodyType {\n    scrollFriction = n\n    return self\n  }\n\n  const self: ScrollBodyType = {\n    direction,\n    duration,\n    velocity,\n    seek,\n    settled,\n    useBaseFriction,\n    useBaseDuration,\n    useFriction,\n    useDuration\n  }\n  return self\n}\n", "import { Limit, LimitType } from './Limit'\nimport { ScrollBodyType } from './ScrollBody'\nimport { Vector1DType } from './Vector1d'\nimport { mathAbs } from './utils'\nimport { PercentOfViewType } from './PercentOfView'\n\nexport type ScrollBoundsType = {\n  shouldConstrain: () => boolean\n  constrain: (pointerDown: boolean) => void\n  toggleActive: (active: boolean) => void\n}\n\nexport function ScrollBounds(\n  limit: LimitType,\n  location: Vector1DType,\n  target: Vector1DType,\n  scrollBody: ScrollBodyType,\n  percentOfView: PercentOfViewType\n): ScrollBoundsType {\n  const pullBackThreshold = percentOfView.measure(10)\n  const edgeOffsetTolerance = percentOfView.measure(50)\n  const frictionLimit = Limit(0.1, 0.99)\n  let disabled = false\n\n  function shouldConstrain(): boolean {\n    if (disabled) return false\n    if (!limit.reachedAny(target.get())) return false\n    if (!limit.reachedAny(location.get())) return false\n    return true\n  }\n\n  function constrain(pointerDown: boolean): void {\n    if (!shouldConstrain()) return\n    const edge = limit.reachedMin(location.get()) ? 'min' : 'max'\n    const diffToEdge = mathAbs(limit[edge] - location.get())\n    const diffToTarget = target.get() - location.get()\n    const friction = frictionLimit.constrain(diffToEdge / edgeOffsetTolerance)\n\n    target.subtract(diffToTarget * friction)\n\n    if (!pointerDown && mathAbs(diffToTarget) < pullBackThreshold) {\n      target.set(limit.constrain(target.get()))\n      scrollBody.useDuration(25).useBaseFriction()\n    }\n  }\n\n  function toggleActive(active: boolean): void {\n    disabled = !active\n  }\n\n  const self: ScrollBoundsType = {\n    shouldConstrain,\n    constrain,\n    toggleActive\n  }\n  return self\n}\n", "import { Limit, LimitType } from './Limit'\nimport { arrayIsLastIndex, arrayLast, deltaAbs } from './utils'\n\nexport type ScrollContainOptionType = false | 'trimSnaps' | 'keepSnaps'\n\nexport type ScrollContainType = {\n  snapsContained: number[]\n  scrollContainLimit: LimitType\n}\n\nexport function ScrollContain(\n  viewSize: number,\n  contentSize: number,\n  snapsAligned: number[],\n  containScroll: ScrollContainOptionType,\n  pixelTolerance: number\n): ScrollContainType {\n  const scrollBounds = Limit(-contentSize + viewSize, 0)\n  const snapsBounded = measureBounded()\n  const scrollContainLimit = findScrollContainLimit()\n  const snapsContained = measureContained()\n\n  function usePixelTolerance(bound: number, snap: number): boolean {\n    return deltaAbs(bound, snap) <= 1\n  }\n\n  function findScrollContainLimit(): LimitType {\n    const startSnap = snapsBounded[0]\n    const endSnap = arrayLast(snapsBounded)\n    const min = snapsBounded.lastIndexOf(startSnap)\n    const max = snapsBounded.indexOf(endSnap) + 1\n    return Limit(min, max)\n  }\n\n  function measureBounded(): number[] {\n    return snapsAligned\n      .map((snapAligned, index) => {\n        const { min, max } = scrollBounds\n        const snap = scrollBounds.constrain(snapAligned)\n        const isFirst = !index\n        const isLast = arrayIsLastIndex(snapsAligned, index)\n        if (isFirst) return max\n        if (isLast) return min\n        if (usePixelTolerance(min, snap)) return min\n        if (usePixelTolerance(max, snap)) return max\n        return snap\n      })\n      .map((scrollBound) => parseFloat(scrollBound.toFixed(3)))\n  }\n\n  function measureContained(): number[] {\n    if (contentSize <= viewSize + pixelTolerance) return [scrollBounds.max]\n    if (containScroll === 'keepSnaps') return snapsBounded\n    const { min, max } = scrollContainLimit\n    return snapsBounded.slice(min, max)\n  }\n\n  const self: ScrollContainType = {\n    snapsContained,\n    scrollContainLimit\n  }\n  return self\n}\n", "import { Limit, LimitType } from './Limit'\nimport { arrayLast } from './utils'\n\nexport type ScrollLimitType = {\n  limit: LimitType\n}\n\nexport function ScrollLimit(\n  contentSize: number,\n  scrollSnaps: number[],\n  loop: boolean\n): ScrollLimitType {\n  const max = scrollSnaps[0]\n  const min = loop ? max - contentSize : arrayLast(scrollSnaps)\n  const limit = Limit(min, max)\n\n  const self: ScrollLimitType = {\n    limit\n  }\n  return self\n}\n", "import { Limit, LimitType } from './Limit'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollLooperType = {\n  loop: (direction: number) => void\n}\n\nexport function ScrollLooper(\n  contentSize: number,\n  limit: LimitType,\n  location: Vector1DType,\n  vectors: Vector1DType[]\n): ScrollLooperType {\n  const jointSafety = 0.1\n  const min = limit.min + jointSafety\n  const max = limit.max + jointSafety\n  const { reachedMin, reachedMax } = Limit(min, max)\n\n  function shouldLoop(direction: number): boolean {\n    if (direction === 1) return reachedMax(location.get())\n    if (direction === -1) return reachedMin(location.get())\n    return false\n  }\n\n  function loop(direction: number): void {\n    if (!shouldLoop(direction)) return\n\n    const loopDistance = contentSize * (direction * -1)\n    vectors.forEach((v) => v.add(loopDistance))\n  }\n\n  const self: ScrollLooperType = {\n    loop\n  }\n  return self\n}\n", "import { LimitType } from './Limit'\n\nexport type ScrollProgressType = {\n  get: (n: number) => number\n}\n\nexport function ScrollProgress(limit: LimitType): ScrollProgressType {\n  const { max, length } = limit\n\n  function get(n: number): number {\n    const currentLocation = n - max\n    return length ? currentLocation / -length : 0\n  }\n\n  const self: ScrollProgressType = {\n    get\n  }\n  return self\n}\n", "import { AlignmentType } from './Alignment'\nimport { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport { SlidesToScrollType } from './SlidesToScroll'\nimport { arrayLast, mathAbs } from './utils'\n\nexport type ScrollSnapsType = {\n  snaps: number[]\n  snapsAligned: number[]\n}\n\nexport function ScrollSnaps(\n  axis: AxisType,\n  alignment: AlignmentType,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  slidesToScroll: SlidesToScrollType\n): ScrollSnapsType {\n  const { startEdge, endEdge } = axis\n  const { groupSlides } = slidesToScroll\n  const alignments = measureSizes().map(alignment.measure)\n  const snaps = measureUnaligned()\n  const snapsAligned = measureAligned()\n\n  function measureSizes(): number[] {\n    return groupSlides(slideRects)\n      .map((rects) => arrayLast(rects)[endEdge] - rects[0][startEdge])\n      .map(mathAbs)\n  }\n\n  function measureUnaligned(): number[] {\n    return slideRects\n      .map((rect) => containerRect[startEdge] - rect[startEdge])\n      .map((snap) => -mathAbs(snap))\n  }\n\n  function measureAligned(): number[] {\n    return groupSlides(snaps)\n      .map((g) => g[0])\n      .map((snap, index) => snap + alignments[index])\n  }\n\n  const self: ScrollSnapsType = {\n    snaps,\n    snapsAligned\n  }\n  return self\n}\n", "import { LimitType } from './Limit'\nimport { ScrollContainOptionType } from './ScrollContain'\nimport { SlidesToScrollType } from './SlidesToScroll'\nimport {\n  arrayFromNumber,\n  arrayIsLastIndex,\n  arrayLast,\n  arrayLastIndex\n} from './utils'\n\nexport type SlideRegistryType = {\n  slideRegistry: number[][]\n}\n\nexport function SlideRegistry(\n  containSnaps: boolean,\n  containScroll: ScrollContainOptionType,\n  scrollSnaps: number[],\n  scrollContainLimit: LimitType,\n  slidesToScroll: SlidesToScrollType,\n  slideIndexes: number[]\n): SlideRegistryType {\n  const { groupSlides } = slidesToScroll\n  const { min, max } = scrollContainLimit\n  const slideRegistry = createSlideRegistry()\n\n  function createSlideRegistry(): number[][] {\n    const groupedSlideIndexes = groupSlides(slideIndexes)\n    const doNotContain = !containSnaps || containScroll === 'keepSnaps'\n\n    if (scrollSnaps.length === 1) return [slideIndexes]\n    if (doNotContain) return groupedSlideIndexes\n\n    return groupedSlideIndexes.slice(min, max).map((group, index, groups) => {\n      const isFirst = !index\n      const isLast = arrayIsLastIndex(groups, index)\n\n      if (isFirst) {\n        const range = arrayLast(groups[0]) + 1\n        return arrayFromNumber(range)\n      }\n      if (isLast) {\n        const range = arrayLastIndex(slideIndexes) - arrayLast(groups)[0] + 1\n        return arrayFromNumber(range, arrayLast(groups)[0])\n      }\n      return group\n    })\n  }\n\n  const self: SlideRegistryType = {\n    slideRegistry\n  }\n  return self\n}\n", "import { LimitType } from './Limit'\nimport { Vector1DType } from './Vector1d'\nimport { arrayLast, mathAbs, mathSign } from './utils'\n\nexport type TargetType = {\n  distance: number\n  index: number\n}\n\nexport type ScrollTargetType = {\n  byIndex: (target: number, direction: number) => TargetType\n  byDistance: (force: number, snap: boolean) => TargetType\n  shortcut: (target: number, direction: number) => number\n}\n\nexport function ScrollTarget(\n  loop: boolean,\n  scrollSnaps: number[],\n  contentSize: number,\n  limit: LimitType,\n  targetVector: Vector1DType\n): ScrollTargetType {\n  const { reachedAny, removeOffset, constrain } = limit\n\n  function minDistance(distances: number[]): number {\n    return distances.concat().sort((a, b) => mathAbs(a) - mathAbs(b))[0]\n  }\n\n  function findTargetSnap(target: number): TargetType {\n    const distance = loop ? removeOffset(target) : constrain(target)\n    const ascDiffsToSnaps = scrollSnaps\n      .map((snap, index) => ({ diff: shortcut(snap - distance, 0), index }))\n      .sort((d1, d2) => mathAbs(d1.diff) - mathAbs(d2.diff))\n\n    const { index } = ascDiffsToSnaps[0]\n    return { index, distance }\n  }\n\n  function shortcut(target: number, direction: number): number {\n    const targets = [target, target + contentSize, target - contentSize]\n\n    if (!loop) return target\n    if (!direction) return minDistance(targets)\n\n    const matchingTargets = targets.filter((t) => mathSign(t) === direction)\n    if (matchingTargets.length) return minDistance(matchingTargets)\n    return arrayLast(targets) - contentSize\n  }\n\n  function byIndex(index: number, direction: number): TargetType {\n    const diffToSnap = scrollSnaps[index] - targetVector.get()\n    const distance = shortcut(diffToSnap, direction)\n    return { index, distance }\n  }\n\n  function byDistance(distance: number, snap: boolean): TargetType {\n    const target = targetVector.get() + distance\n    const { index, distance: targetSnapDistance } = findTargetSnap(target)\n    const reachedBound = !loop && reachedAny(target)\n\n    if (!snap || reachedBound) return { index, distance }\n\n    const diffToSnap = scrollSnaps[index] - targetSnapDistance\n    const snapDistance = distance + shortcut(diffToSnap, 0)\n\n    return { index, distance: snapDistance }\n  }\n\n  const self: ScrollTargetType = {\n    byDistance,\n    byIndex,\n    shortcut\n  }\n  return self\n}\n", "import { AnimationsType } from './Animations'\nimport { CounterType } from './Counter'\nimport { EventHandlerType } from './EventHandler'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollTargetType, TargetType } from './ScrollTarget'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollToType = {\n  distance: (n: number, snap: boolean) => void\n  index: (n: number, direction: number) => void\n}\n\nexport function ScrollTo(\n  animation: AnimationsType,\n  indexCurrent: CounterType,\n  indexPrevious: CounterType,\n  scrollBody: ScrollBodyType,\n  scrollTarget: ScrollTargetType,\n  targetVector: Vector1DType,\n  eventHandler: EventHandlerType\n): ScrollToType {\n  function scrollTo(target: TargetType): void {\n    const distanceDiff = target.distance\n    const indexDiff = target.index !== indexCurrent.get()\n\n    targetVector.add(distanceDiff)\n\n    if (distanceDiff) {\n      if (scrollBody.duration()) {\n        animation.start()\n      } else {\n        animation.update()\n        animation.render(1)\n        animation.update()\n      }\n    }\n\n    if (indexDiff) {\n      indexPrevious.set(indexCurrent.get())\n      indexCurrent.set(target.index)\n      eventHandler.emit('select')\n    }\n  }\n\n  function distance(n: number, snap: boolean): void {\n    const target = scrollTarget.byDistance(n, snap)\n    scrollTo(target)\n  }\n\n  function index(n: number, direction: number): void {\n    const targetIndex = indexCurrent.clone().set(n)\n    const target = scrollTarget.byIndex(targetIndex.get(), direction)\n    scrollTo(target)\n  }\n\n  const self: ScrollToType = {\n    distance,\n    index\n  }\n  return self\n}\n", "import { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { EventStoreType } from './EventStore'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollToType } from './ScrollTo'\nimport { SlideRegistryType } from './SlideRegistry'\nimport { isBoolean, isNumber } from './utils'\n\ntype FocusHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  evt: FocusEvent\n) => boolean | void\n\nexport type FocusHandlerOptionType = boolean | FocusHandlerCallbackType\n\nexport type SlideFocusType = {\n  init: (emblaApi: EmblaCarouselType) => void\n}\n\nexport function SlideFocus(\n  root: HTMLElement,\n  slides: HTMLElement[],\n  slideRegistry: SlideRegistryType['slideRegistry'],\n  scrollTo: ScrollToType,\n  scrollBody: ScrollBodyType,\n  eventStore: EventStoreType,\n  eventHandler: EventHandlerType,\n  watchFocus: FocusHandlerOptionType\n): SlideFocusType {\n  const focusListenerOptions = { passive: true, capture: true }\n  let lastTabPressTime = 0\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchFocus) return\n\n    function defaultCallback(index: number): void {\n      const nowTime = new Date().getTime()\n      const diffTime = nowTime - lastTabPressTime\n\n      if (diffTime > 10) return\n\n      eventHandler.emit('slideFocusStart')\n      root.scrollLeft = 0\n\n      const group = slideRegistry.findIndex((group) => group.includes(index))\n\n      if (!isNumber(group)) return\n\n      scrollBody.useDuration(0)\n      scrollTo.index(group, 0)\n\n      eventHandler.emit('slideFocus')\n    }\n\n    eventStore.add(document, 'keydown', registerTabPress, false)\n\n    slides.forEach((slide, slideIndex) => {\n      eventStore.add(\n        slide,\n        'focus',\n        (evt: FocusEvent) => {\n          if (isBoolean(watchFocus) || watchFocus(emblaApi, evt)) {\n            defaultCallback(slideIndex)\n          }\n        },\n        focusListenerOptions\n      )\n    })\n  }\n\n  function registerTabPress(event: KeyboardEvent): void {\n    if (event.code === 'Tab') lastTabPressTime = new Date().getTime()\n  }\n\n  const self: SlideFocusType = {\n    init\n  }\n  return self\n}\n", "import { isNumber } from './utils'\n\nexport type Vector1DType = {\n  get: () => number\n  set: (n: Vector1DType | number) => void\n  add: (n: Vector1DType | number) => void\n  subtract: (n: Vector1DType | number) => void\n}\n\nexport function Vector1D(initialValue: number): Vector1DType {\n  let value = initialValue\n\n  function get(): number {\n    return value\n  }\n\n  function set(n: Vector1DType | number): void {\n    value = normalizeInput(n)\n  }\n\n  function add(n: Vector1DType | number): void {\n    value += normalizeInput(n)\n  }\n\n  function subtract(n: Vector1DType | number): void {\n    value -= normalizeInput(n)\n  }\n\n  function normalizeInput(n: Vector1DType | number): number {\n    return isNumber(n) ? n : n.get()\n  }\n\n  const self: Vector1DType = {\n    get,\n    set,\n    add,\n    subtract\n  }\n  return self\n}\n", "import { AxisType } from './Axis'\nimport { roundToTwoDecimals } from './utils'\n\nexport type TranslateType = {\n  clear: () => void\n  to: (target: number) => void\n  toggleActive: (active: boolean) => void\n}\n\nexport function Translate(\n  axis: AxisType,\n  container: HTMLElement\n): TranslateType {\n  const translate = axis.scroll === 'x' ? x : y\n  const containerStyle = container.style\n  let previousTarget: number | null = null\n  let disabled = false\n\n  function x(n: number): string {\n    return `translate3d(${n}px,0px,0px)`\n  }\n\n  function y(n: number): string {\n    return `translate3d(0px,${n}px,0px)`\n  }\n\n  function to(target: number): void {\n    if (disabled) return\n\n    const newTarget = roundToTwoDecimals(axis.direction(target))\n    if (newTarget === previousTarget) return\n\n    containerStyle.transform = translate(newTarget)\n    previousTarget = newTarget\n  }\n\n  function toggleActive(active: boolean): void {\n    disabled = !active\n  }\n\n  function clear(): void {\n    if (disabled) return\n    containerStyle.transform = ''\n    if (!container.getAttribute('style')) container.removeAttribute('style')\n  }\n\n  const self: TranslateType = {\n    clear,\n    to,\n    toggleActive\n  }\n  return self\n}\n", "import { AxisType } from './Axis'\nimport { arrayKeys } from './utils'\nimport { Vector1D, Vector1DType } from './Vector1d'\nimport { Translate, TranslateType } from './Translate'\n\ntype SlideBoundType = {\n  start: number\n  end: number\n}\n\ntype LoopPointType = {\n  loopPoint: number\n  index: number\n  translate: TranslateType\n  slideLocation: Vector1DType\n  target: () => number\n}\n\nexport type SlideLooperType = {\n  canLoop: () => boolean\n  clear: () => void\n  loop: () => void\n  loopPoints: LoopPointType[]\n}\n\nexport function SlideLooper(\n  axis: AxisType,\n  viewSize: number,\n  contentSize: number,\n  slideSizes: number[],\n  slideSizesWithGaps: number[],\n  snaps: number[],\n  scrollSnaps: number[],\n  location: Vector1DType,\n  slides: HTMLElement[]\n): SlideLooperType {\n  const roundingSafety = 0.5\n  const ascItems = arrayKeys(slideSizesWithGaps)\n  const descItems = arrayKeys(slideSizesWithGaps).reverse()\n  const loopPoints = startPoints().concat(endPoints())\n\n  function removeSlideSizes(indexes: number[], from: number): number {\n    return indexes.reduce((a: number, i) => {\n      return a - slideSizesWithGaps[i]\n    }, from)\n  }\n\n  function slidesInGap(indexes: number[], gap: number): number[] {\n    return indexes.reduce((a: number[], i) => {\n      const remainingGap = removeSlideSizes(a, gap)\n      return remainingGap > 0 ? a.concat([i]) : a\n    }, [])\n  }\n\n  function findSlideBounds(offset: number): SlideBoundType[] {\n    return snaps.map((snap, index) => ({\n      start: snap - slideSizes[index] + roundingSafety + offset,\n      end: snap + viewSize - roundingSafety + offset\n    }))\n  }\n\n  function findLoopPoints(\n    indexes: number[],\n    offset: number,\n    isEndEdge: boolean\n  ): LoopPointType[] {\n    const slideBounds = findSlideBounds(offset)\n\n    return indexes.map((index) => {\n      const initial = isEndEdge ? 0 : -contentSize\n      const altered = isEndEdge ? contentSize : 0\n      const boundEdge = isEndEdge ? 'end' : 'start'\n      const loopPoint = slideBounds[index][boundEdge]\n\n      return {\n        index,\n        loopPoint,\n        slideLocation: Vector1D(-1),\n        translate: Translate(axis, slides[index]),\n        target: () => (location.get() > loopPoint ? initial : altered)\n      }\n    })\n  }\n\n  function startPoints(): LoopPointType[] {\n    const gap = scrollSnaps[0]\n    const indexes = slidesInGap(descItems, gap)\n    return findLoopPoints(indexes, contentSize, false)\n  }\n\n  function endPoints(): LoopPointType[] {\n    const gap = viewSize - scrollSnaps[0] - 1\n    const indexes = slidesInGap(ascItems, gap)\n    return findLoopPoints(indexes, -contentSize, true)\n  }\n\n  function canLoop(): boolean {\n    return loopPoints.every(({ index }) => {\n      const otherIndexes = ascItems.filter((i) => i !== index)\n      return removeSlideSizes(otherIndexes, viewSize) <= 0.1\n    })\n  }\n\n  function loop(): void {\n    loopPoints.forEach((loopPoint) => {\n      const { target, translate, slideLocation } = loopPoint\n      const shiftLocation = target()\n      if (shiftLocation === slideLocation.get()) return\n      translate.to(shiftLocation)\n      slideLocation.set(shiftLocation)\n    })\n  }\n\n  function clear(): void {\n    loopPoints.forEach((loopPoint) => loopPoint.translate.clear())\n  }\n\n  const self: SlideLooperType = {\n    canLoop,\n    clear,\n    loop,\n    loopPoints\n  }\n  return self\n}\n", "import { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { isBoolean } from './utils'\n\ntype SlidesHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  mutations: MutationRecord[]\n) => boolean | void\n\nexport type SlidesHandlerOptionType = boolean | SlidesHandlerCallbackType\n\nexport type SlidesHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n}\n\nexport function SlidesHandler(\n  container: HTMLElement,\n  eventHandler: EventHandlerType,\n  watchSlides: SlidesHandlerOptionType\n): SlidesHandlerType {\n  let mutationObserver: MutationObserver\n  let destroyed = false\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchSlides) return\n\n    function defaultCallback(mutations: MutationRecord[]): void {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList') {\n          emblaApi.reInit()\n          eventHandler.emit('slidesChanged')\n          break\n        }\n      }\n    }\n\n    mutationObserver = new MutationObserver((mutations) => {\n      if (destroyed) return\n      if (isBoolean(watchSlides) || watchSlides(emblaApi, mutations)) {\n        defaultCallback(mutations)\n      }\n    })\n\n    mutationObserver.observe(container, { childList: true })\n  }\n\n  function destroy(): void {\n    if (mutationObserver) mutationObserver.disconnect()\n    destroyed = true\n  }\n\n  const self: SlidesHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n", "import { EventHandlerType } from './EventHandler'\nimport { objectKeys } from './utils'\n\ntype IntersectionEntryMapType = {\n  [key: number]: IntersectionObserverEntry\n}\n\nexport type SlidesInViewOptionsType = IntersectionObserverInit['threshold']\n\nexport type SlidesInViewType = {\n  init: () => void\n  destroy: () => void\n  get: (inView?: boolean) => number[]\n}\n\nexport function SlidesInView(\n  container: HTMLElement,\n  slides: HTMLElement[],\n  eventHandler: EventHandlerType,\n  threshold: SlidesInViewOptionsType\n): SlidesInViewType {\n  const intersectionEntryMap: IntersectionEntryMapType = {}\n  let inViewCache: number[] | null = null\n  let notInViewCache: number[] | null = null\n  let intersectionObserver: IntersectionObserver\n  let destroyed = false\n\n  function init(): void {\n    intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        if (destroyed) return\n\n        entries.forEach((entry) => {\n          const index = slides.indexOf(<HTMLElement>entry.target)\n          intersectionEntryMap[index] = entry\n        })\n\n        inViewCache = null\n        notInViewCache = null\n        eventHandler.emit('slidesInView')\n      },\n      {\n        root: container.parentElement,\n        threshold\n      }\n    )\n\n    slides.forEach((slide) => intersectionObserver.observe(slide))\n  }\n\n  function destroy(): void {\n    if (intersectionObserver) intersectionObserver.disconnect()\n    destroyed = true\n  }\n\n  function createInViewList(inView: boolean): number[] {\n    return objectKeys(intersectionEntryMap).reduce(\n      (list: number[], slideIndex) => {\n        const index = parseInt(slideIndex)\n        const { isIntersecting } = intersectionEntryMap[index]\n        const inViewMatch = inView && isIntersecting\n        const notInViewMatch = !inView && !isIntersecting\n\n        if (inViewMatch || notInViewMatch) list.push(index)\n        return list\n      },\n      []\n    )\n  }\n\n  function get(inView: boolean = true): number[] {\n    if (inView && inViewCache) return inViewCache\n    if (!inView && notInViewCache) return notInViewCache\n\n    const slideIndexes = createInViewList(inView)\n\n    if (inView) inViewCache = slideIndexes\n    if (!inView) notInViewCache = slideIndexes\n\n    return slideIndexes\n  }\n\n  const self: SlidesInViewType = {\n    init,\n    destroy,\n    get\n  }\n\n  return self\n}\n", "import { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport { arrayIsLastIndex, arrayLast, mathAbs, WindowType } from './utils'\n\nexport type SlideSizesType = {\n  slideSizes: number[]\n  slideSizesWithGaps: number[]\n  startGap: number\n  endGap: number\n}\n\nexport function SlideSizes(\n  axis: AxisType,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  slides: HTMLElement[],\n  readEdgeGap: boolean,\n  ownerWindow: WindowType\n): SlideSizesType {\n  const { measureSize, startEdge, endEdge } = axis\n  const withEdgeGap = slideRects[0] && readEdgeGap\n  const startGap = measureStartGap()\n  const endGap = measureEndGap()\n  const slideSizes = slideRects.map(measureSize)\n  const slideSizesWithGaps = measureWithGaps()\n\n  function measureStartGap(): number {\n    if (!withEdgeGap) return 0\n    const slideRect = slideRects[0]\n    return mathAbs(containerRect[startEdge] - slideRect[startEdge])\n  }\n\n  function measureEndGap(): number {\n    if (!withEdgeGap) return 0\n    const style = ownerWindow.getComputedStyle(arrayLast(slides))\n    return parseFloat(style.getPropertyValue(`margin-${endEdge}`))\n  }\n\n  function measureWithGaps(): number[] {\n    return slideRects\n      .map((rect, index, rects) => {\n        const isFirst = !index\n        const isLast = arrayIsLastIndex(rects, index)\n        if (isFirst) return slideSizes[index] + startGap\n        if (isLast) return slideSizes[index] + endGap\n        return rects[index + 1][startEdge] - rect[startEdge]\n      })\n      .map(mathAbs)\n  }\n\n  const self: SlideSizesType = {\n    slideSizes,\n    slideSizesWithGaps,\n    startGap,\n    endGap\n  }\n  return self\n}\n", "import { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport {\n  arrayKeys,\n  arrayLast,\n  arrayLastIndex,\n  isNumber,\n  mathAbs\n} from './utils'\n\nexport type SlidesToScrollOptionType = 'auto' | number\n\nexport type SlidesToScrollType = {\n  groupSlides: <Type>(array: Type[]) => Type[][]\n}\n\nexport function SlidesToScroll(\n  axis: AxisType,\n  viewSize: number,\n  slidesToScroll: SlidesToScrollOptionType,\n  loop: boolean,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  startGap: number,\n  endGap: number,\n  pixelTolerance: number\n): SlidesToScrollType {\n  const { startEdge, endEdge, direction } = axis\n  const groupByNumber = isNumber(slidesToScroll)\n\n  function byNumber<Type>(array: Type[], groupSize: number): Type[][] {\n    return arrayKeys(array)\n      .filter((i) => i % groupSize === 0)\n      .map((i) => array.slice(i, i + groupSize))\n  }\n\n  function bySize<Type>(array: Type[]): Type[][] {\n    if (!array.length) return []\n\n    return arrayKeys(array)\n      .reduce((groups: number[], rectB, index) => {\n        const rectA = arrayLast(groups) || 0\n        const isFirst = rectA === 0\n        const isLast = rectB === arrayLastIndex(array)\n\n        const edgeA = containerRect[startEdge] - slideRects[rectA][startEdge]\n        const edgeB = containerRect[startEdge] - slideRects[rectB][endEdge]\n        const gapA = !loop && isFirst ? direction(startGap) : 0\n        const gapB = !loop && isLast ? direction(endGap) : 0\n        const chunkSize = mathAbs(edgeB - gapB - (edgeA + gapA))\n\n        if (index && chunkSize > viewSize + pixelTolerance) groups.push(rectB)\n        if (isLast) groups.push(array.length)\n        return groups\n      }, [])\n      .map((currentSize, index, groups) => {\n        const previousSize = Math.max(groups[index - 1] || 0)\n        return array.slice(previousSize, currentSize)\n      })\n  }\n\n  function groupSlides<Type>(array: Type[]): Type[][] {\n    return groupByNumber ? byNumber(array, slidesToScroll) : bySize(array)\n  }\n\n  const self: SlidesToScrollType = {\n    groupSlides\n  }\n  return self\n}\n", "import { Alignment } from './Alignment'\nimport {\n  Animations,\n  AnimationsType,\n  AnimationsUpdateType,\n  AnimationsRenderType\n} from './Animations'\nimport { Axis, AxisType } from './Axis'\nimport { Counter, CounterType } from './Counter'\nimport { DragHandler, DragHandlerType } from './DragHandler'\nimport { DragTracker } from './DragTracker'\nimport { EventHandlerType } from './EventHandler'\nimport { EventStore, EventStoreType } from './EventStore'\nimport { LimitType } from './Limit'\nimport { NodeRectType, NodeRects } from './NodeRects'\nimport { OptionsType } from './Options'\nimport { PercentOfView, PercentOfViewType } from './PercentOfView'\nimport { ResizeHandler, ResizeHandlerType } from './ResizeHandler'\nimport { ScrollBody, ScrollBodyType } from './ScrollBody'\nimport { ScrollBounds, ScrollBoundsType } from './ScrollBounds'\nimport { ScrollContain } from './ScrollContain'\nimport { ScrollLimit } from './ScrollLimit'\nimport { ScrollLooper, ScrollLooperType } from './ScrollLooper'\nimport { ScrollProgress, ScrollProgressType } from './ScrollProgress'\nimport { ScrollSnaps } from './ScrollSnaps'\nimport { SlideRegistry, SlideRegistryType } from './SlideRegistry'\nimport { ScrollTarget, ScrollTargetType } from './ScrollTarget'\nimport { ScrollTo, ScrollToType } from './ScrollTo'\nimport { SlideFocus, SlideFocusType } from './SlideFocus'\nimport { SlideLooper, SlideLooperType } from './SlideLooper'\nimport { SlidesHandler, SlidesHandlerType } from './SlidesHandler'\nimport { SlidesInView, SlidesInViewType } from './SlidesInView'\nimport { SlideSizes } from './SlideSizes'\nimport { SlidesToScroll, SlidesToScrollType } from './SlidesToScroll'\nimport { Translate, TranslateType } from './Translate'\nimport { arrayKeys, arrayLast, arrayLastIndex, WindowType } from './utils'\nimport { Vector1D, Vector1DType } from './Vector1d'\n\nexport type EngineType = {\n  ownerDocument: Document\n  ownerWindow: WindowType\n  eventHandler: EventHandlerType\n  axis: AxisType\n  animation: AnimationsType\n  scrollBounds: ScrollBoundsType\n  scrollLooper: ScrollLooperType\n  scrollProgress: ScrollProgressType\n  index: CounterType\n  indexPrevious: CounterType\n  limit: LimitType\n  location: Vector1DType\n  offsetLocation: Vector1DType\n  previousLocation: Vector1DType\n  options: OptionsType\n  percentOfView: PercentOfViewType\n  scrollBody: ScrollBodyType\n  dragHandler: DragHandlerType\n  eventStore: EventStoreType\n  slideLooper: SlideLooperType\n  slidesInView: SlidesInViewType\n  slidesToScroll: SlidesToScrollType\n  target: Vector1DType\n  translate: TranslateType\n  resizeHandler: ResizeHandlerType\n  slidesHandler: SlidesHandlerType\n  scrollTo: ScrollToType\n  scrollTarget: ScrollTargetType\n  scrollSnapList: number[]\n  scrollSnaps: number[]\n  slideIndexes: number[]\n  slideFocus: SlideFocusType\n  slideRegistry: SlideRegistryType['slideRegistry']\n  containerRect: NodeRectType\n  slideRects: NodeRectType[]\n}\n\nexport function Engine(\n  root: HTMLElement,\n  container: HTMLElement,\n  slides: HTMLElement[],\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  options: OptionsType,\n  eventHandler: EventHandlerType\n): EngineType {\n  // Options\n  const {\n    align,\n    axis: scrollAxis,\n    direction,\n    startIndex,\n    loop,\n    duration,\n    dragFree,\n    dragThreshold,\n    inViewThreshold,\n    slidesToScroll: groupSlides,\n    skipSnaps,\n    containScroll,\n    watchResize,\n    watchSlides,\n    watchDrag,\n    watchFocus\n  } = options\n\n  // Measurements\n  const pixelTolerance = 2\n  const nodeRects = NodeRects()\n  const containerRect = nodeRects.measure(container)\n  const slideRects = slides.map(nodeRects.measure)\n  const axis = Axis(scrollAxis, direction)\n  const viewSize = axis.measureSize(containerRect)\n  const percentOfView = PercentOfView(viewSize)\n  const alignment = Alignment(align, viewSize)\n  const containSnaps = !loop && !!containScroll\n  const readEdgeGap = loop || !!containScroll\n  const { slideSizes, slideSizesWithGaps, startGap, endGap } = SlideSizes(\n    axis,\n    containerRect,\n    slideRects,\n    slides,\n    readEdgeGap,\n    ownerWindow\n  )\n  const slidesToScroll = SlidesToScroll(\n    axis,\n    viewSize,\n    groupSlides,\n    loop,\n    containerRect,\n    slideRects,\n    startGap,\n    endGap,\n    pixelTolerance\n  )\n  const { snaps, snapsAligned } = ScrollSnaps(\n    axis,\n    alignment,\n    containerRect,\n    slideRects,\n    slidesToScroll\n  )\n  const contentSize = -arrayLast(snaps) + arrayLast(slideSizesWithGaps)\n  const { snapsContained, scrollContainLimit } = ScrollContain(\n    viewSize,\n    contentSize,\n    snapsAligned,\n    containScroll,\n    pixelTolerance\n  )\n  const scrollSnaps = containSnaps ? snapsContained : snapsAligned\n  const { limit } = ScrollLimit(contentSize, scrollSnaps, loop)\n\n  // Indexes\n  const index = Counter(arrayLastIndex(scrollSnaps), startIndex, loop)\n  const indexPrevious = index.clone()\n  const slideIndexes = arrayKeys(slides)\n\n  // Animation\n  const update: AnimationsUpdateType = ({\n    dragHandler,\n    scrollBody,\n    scrollBounds,\n    options: { loop }\n  }) => {\n    if (!loop) scrollBounds.constrain(dragHandler.pointerDown())\n    scrollBody.seek()\n  }\n\n  const render: AnimationsRenderType = (\n    {\n      scrollBody,\n      translate,\n      location,\n      offsetLocation,\n      previousLocation,\n      scrollLooper,\n      slideLooper,\n      dragHandler,\n      animation,\n      eventHandler,\n      scrollBounds,\n      options: { loop }\n    },\n    alpha\n  ) => {\n    const shouldSettle = scrollBody.settled()\n    const withinBounds = !scrollBounds.shouldConstrain()\n    const hasSettled = loop ? shouldSettle : shouldSettle && withinBounds\n    const hasSettledAndIdle = hasSettled && !dragHandler.pointerDown()\n\n    if (hasSettledAndIdle) animation.stop()\n\n    const interpolatedLocation =\n      location.get() * alpha + previousLocation.get() * (1 - alpha)\n\n    offsetLocation.set(interpolatedLocation)\n\n    if (loop) {\n      scrollLooper.loop(scrollBody.direction())\n      slideLooper.loop()\n    }\n\n    translate.to(offsetLocation.get())\n\n    if (hasSettledAndIdle) eventHandler.emit('settle')\n    if (!hasSettled) eventHandler.emit('scroll')\n  }\n\n  const animation = Animations(\n    ownerDocument,\n    ownerWindow,\n    () => update(engine),\n    (alpha: number) => render(engine, alpha)\n  )\n\n  // Shared\n  const friction = 0.68\n  const startLocation = scrollSnaps[index.get()]\n  const location = Vector1D(startLocation)\n  const previousLocation = Vector1D(startLocation)\n  const offsetLocation = Vector1D(startLocation)\n  const target = Vector1D(startLocation)\n  const scrollBody = ScrollBody(\n    location,\n    offsetLocation,\n    previousLocation,\n    target,\n    duration,\n    friction\n  )\n  const scrollTarget = ScrollTarget(\n    loop,\n    scrollSnaps,\n    contentSize,\n    limit,\n    target\n  )\n  const scrollTo = ScrollTo(\n    animation,\n    index,\n    indexPrevious,\n    scrollBody,\n    scrollTarget,\n    target,\n    eventHandler\n  )\n  const scrollProgress = ScrollProgress(limit)\n  const eventStore = EventStore()\n  const slidesInView = SlidesInView(\n    container,\n    slides,\n    eventHandler,\n    inViewThreshold\n  )\n  const { slideRegistry } = SlideRegistry(\n    containSnaps,\n    containScroll,\n    scrollSnaps,\n    scrollContainLimit,\n    slidesToScroll,\n    slideIndexes\n  )\n  const slideFocus = SlideFocus(\n    root,\n    slides,\n    slideRegistry,\n    scrollTo,\n    scrollBody,\n    eventStore,\n    eventHandler,\n    watchFocus\n  )\n\n  // Engine\n  const engine: EngineType = {\n    ownerDocument,\n    ownerWindow,\n    eventHandler,\n    containerRect,\n    slideRects,\n    animation,\n    axis,\n    dragHandler: DragHandler(\n      axis,\n      root,\n      ownerDocument,\n      ownerWindow,\n      target,\n      DragTracker(axis, ownerWindow),\n      location,\n      animation,\n      scrollTo,\n      scrollBody,\n      scrollTarget,\n      index,\n      eventHandler,\n      percentOfView,\n      dragFree,\n      dragThreshold,\n      skipSnaps,\n      friction,\n      watchDrag\n    ),\n    eventStore,\n    percentOfView,\n    index,\n    indexPrevious,\n    limit,\n    location,\n    offsetLocation,\n    previousLocation,\n    options,\n    resizeHandler: ResizeHandler(\n      container,\n      eventHandler,\n      ownerWindow,\n      slides,\n      axis,\n      watchResize,\n      nodeRects\n    ),\n    scrollBody,\n    scrollBounds: ScrollBounds(\n      limit,\n      offsetLocation,\n      target,\n      scrollBody,\n      percentOfView\n    ),\n    scrollLooper: ScrollLooper(contentSize, limit, offsetLocation, [\n      location,\n      offsetLocation,\n      previousLocation,\n      target\n    ]),\n    scrollProgress,\n    scrollSnapList: scrollSnaps.map(scrollProgress.get),\n    scrollSnaps,\n    scrollTarget,\n    scrollTo,\n    slideLooper: SlideLooper(\n      axis,\n      viewSize,\n      contentSize,\n      slideSizes,\n      slideSizesWithGaps,\n      snaps,\n      scrollSnaps,\n      offsetLocation,\n      slides\n    ),\n    slideFocus,\n    slidesHandler: SlidesHandler(container, eventHandler, watchSlides),\n    slidesInView,\n    slideIndexes,\n    slideRegistry,\n    slidesToScroll,\n    target,\n    translate: Translate(axis, container)\n  }\n\n  return engine\n}\n", "import { EmblaCarouselType } from './EmblaCarousel'\n\ntype CallbackType = (emblaApi: EmblaCarouselType, evt: EmblaEventType) => void\ntype ListenersType = Partial<{ [key in EmblaEventType]: CallbackType[] }>\n\nexport type EmblaEventType = EmblaEventListType[keyof EmblaEventListType]\n\nexport interface EmblaEventListType {\n  init: 'init'\n  pointerDown: 'pointerDown'\n  pointerUp: 'pointerUp'\n  slidesChanged: 'slidesChanged'\n  slidesInView: 'slidesInView'\n  scroll: 'scroll'\n  select: 'select'\n  settle: 'settle'\n  destroy: 'destroy'\n  reInit: 'reInit'\n  resize: 'resize'\n  slideFocusStart: 'slideFocusStart'\n  slideFocus: 'slideFocus'\n}\n\nexport type EventHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  emit: (evt: EmblaEventType) => EventHandlerType\n  on: (evt: EmblaEventType, cb: CallbackType) => EventHandlerType\n  off: (evt: EmblaEventType, cb: CallbackType) => EventHandlerType\n  clear: () => void\n}\n\nexport function EventHandler(): EventHandlerType {\n  let listeners: ListenersType = {}\n  let api: EmblaCarouselType\n\n  function init(emblaApi: EmblaCarouselType): void {\n    api = emblaApi\n  }\n\n  function getListeners(evt: EmblaEventType): CallbackType[] {\n    return listeners[evt] || []\n  }\n\n  function emit(evt: EmblaEventType): EventHandlerType {\n    getListeners(evt).forEach((e) => e(api, evt))\n    return self\n  }\n\n  function on(evt: EmblaEventType, cb: CallbackType): EventHandlerType {\n    listeners[evt] = getListeners(evt).concat([cb])\n    return self\n  }\n\n  function off(evt: EmblaEventType, cb: CallbackType): EventHandlerType {\n    listeners[evt] = getListeners(evt).filter((e) => e !== cb)\n    return self\n  }\n\n  function clear(): void {\n    listeners = {}\n  }\n\n  const self: EventHandlerType = {\n    init,\n    emit,\n    off,\n    on,\n    clear\n  }\n  return self\n}\n", "import { AlignmentOptionType } from './Alignment'\nimport { AxisDirectionOptionType, AxisOptionType } from './Axis'\nimport { SlidesToScrollOptionType } from './SlidesToScroll'\nimport { ScrollContainOptionType } from './ScrollContain'\nimport { DragHandlerOptionType } from './DragHandler'\nimport { ResizeHandlerOptionType } from './ResizeHandler'\nimport { SlidesHandlerOptionType } from './SlidesHandler'\nimport { SlidesInViewOptionsType } from './SlidesInView'\nimport { FocusHandlerOptionType } from './SlideFocus'\n\nexport type LooseOptionsType = {\n  [key: string]: unknown\n}\n\nexport type CreateOptionsType<Type extends LooseOptionsType> = Type & {\n  active: boolean\n  breakpoints: {\n    [key: string]: Omit<Partial<CreateOptionsType<Type>>, 'breakpoints'>\n  }\n}\n\nexport type OptionsType = CreateOptionsType<{\n  align: AlignmentOptionType\n  axis: AxisOptionType\n  container: string | HTMLElement | null\n  slides: string | HTMLElement[] | NodeListOf<HTMLElement> | null\n  containScroll: ScrollContainOptionType\n  direction: AxisDirectionOptionType\n  slidesToScroll: SlidesToScrollOptionType\n  dragFree: boolean\n  dragThreshold: number\n  inViewThreshold: SlidesInViewOptionsType\n  loop: boolean\n  skipSnaps: boolean\n  duration: number\n  startIndex: number\n  watchDrag: DragHandlerOptionType\n  watchResize: ResizeHandlerOptionType\n  watchSlides: SlidesHandlerOptionType\n  watchFocus: FocusHandlerOptionType\n}>\n\nexport const defaultOptions: OptionsType = {\n  align: 'center',\n  axis: 'x',\n  container: null,\n  slides: null,\n  containScroll: 'trimSnaps',\n  direction: 'ltr',\n  slidesToScroll: 1,\n  inViewThreshold: 0,\n  breakpoints: {},\n  dragFree: false,\n  dragThreshold: 10,\n  loop: false,\n  skipSnaps: false,\n  duration: 25,\n  startIndex: 0,\n  active: true,\n  watchDrag: true,\n  watchResize: true,\n  watchSlides: true,\n  watchFocus: true\n}\n\nexport type EmblaOptionsType = Partial<OptionsType>\n", "import { LooseOptionsType, CreateOptionsType } from './Options'\nimport { objectKeys, objectsMergeDeep, WindowType } from './utils'\n\ntype OptionsType = Partial<CreateOptionsType<LooseOptionsType>>\n\nexport type OptionsHandlerType = {\n  mergeOptions: <TypeA extends OptionsType, TypeB extends OptionsType>(\n    optionsA: TypeA,\n    optionsB?: TypeB\n  ) => TypeA\n  optionsAtMedia: <Type extends OptionsType>(options: Type) => Type\n  optionsMediaQueries: (optionsList: OptionsType[]) => MediaQueryList[]\n}\n\nexport function OptionsHandler(ownerWindow: WindowType): OptionsHandlerType {\n  function mergeOptions<TypeA extends OptionsType, TypeB extends OptionsType>(\n    optionsA: TypeA,\n    optionsB?: TypeB\n  ): TypeA {\n    return <TypeA>objectsMergeDeep(optionsA, optionsB || {})\n  }\n\n  function optionsAtMedia<Type extends OptionsType>(options: Type): Type {\n    const optionsAtMedia = options.breakpoints || {}\n    const matchedMediaOptions = objectKeys(optionsAtMedia)\n      .filter((media) => ownerWindow.matchMedia(media).matches)\n      .map((media) => optionsAtMedia[media])\n      .reduce((a, mediaOption) => mergeOptions(a, mediaOption), {})\n\n    return mergeOptions(options, matchedMediaOptions)\n  }\n\n  function optionsMediaQueries(optionsList: OptionsType[]): MediaQueryList[] {\n    return optionsList\n      .map((options) => objectKeys(options.breakpoints || {}))\n      .reduce((acc, mediaQueries) => acc.concat(mediaQueries), [])\n      .map(ownerWindow.matchMedia)\n  }\n\n  const self: OptionsHandlerType = {\n    mergeOptions,\n    optionsAtMedia,\n    optionsMediaQueries\n  }\n  return self\n}\n", "import { EmblaCarouselType } from './EmblaCarousel'\nimport { OptionsHandlerType } from './OptionsHandler'\nimport { EmblaPluginsType, EmblaPluginType } from './Plugins'\n\nexport type PluginsHandlerType = {\n  init: (\n    emblaApi: EmblaCarouselType,\n    plugins: EmblaPluginType[]\n  ) => EmblaPluginsType\n  destroy: () => void\n}\n\nexport function PluginsHandler(\n  optionsHandler: OptionsHandlerType\n): PluginsHandlerType {\n  let activePlugins: EmblaPluginType[] = []\n\n  function init(\n    emblaApi: EmblaCarouselType,\n    plugins: EmblaPluginType[]\n  ): EmblaPluginsType {\n    activePlugins = plugins.filter(\n      ({ options }) => optionsHandler.optionsAtMedia(options).active !== false\n    )\n    activePlugins.forEach((plugin) => plugin.init(emblaApi, optionsHandler))\n\n    return plugins.reduce(\n      (map, plugin) => Object.assign(map, { [plugin.name]: plugin }),\n      {}\n    )\n  }\n\n  function destroy(): void {\n    activePlugins = activePlugins.filter((plugin) => plugin.destroy())\n  }\n\n  const self: PluginsHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n", "import { Engine, EngineType } from './Engine'\nimport { EventStore } from './EventStore'\nimport { EventHandler, EventHandlerType } from './EventHandler'\nimport { defaultOptions, EmblaOptionsType, OptionsType } from './Options'\nimport { OptionsHandler } from './OptionsHandler'\nimport { PluginsHandler } from './PluginsHandler'\nimport { EmblaPluginsType, EmblaPluginType } from './Plugins'\nimport { isString, WindowType } from './utils'\n\nexport type EmblaCarouselType = {\n  canScrollNext: () => boolean\n  canScrollPrev: () => boolean\n  containerNode: () => HTMLElement\n  internalEngine: () => EngineType\n  destroy: () => void\n  off: EventHandlerType['off']\n  on: EventHandlerType['on']\n  emit: EventHandlerType['emit']\n  plugins: () => EmblaPluginsType\n  previousScrollSnap: () => number\n  reInit: (options?: EmblaOptionsType, plugins?: EmblaPluginType[]) => void\n  rootNode: () => HTMLElement\n  scrollNext: (jump?: boolean) => void\n  scrollPrev: (jump?: boolean) => void\n  scrollProgress: () => number\n  scrollSnapList: () => number[]\n  scrollTo: (index: number, jump?: boolean) => void\n  selectedScrollSnap: () => number\n  slideNodes: () => HTMLElement[]\n  slidesInView: () => number[]\n  slidesNotInView: () => number[]\n}\n\nfunction EmblaCarousel(\n  root: HTMLElement,\n  userOptions?: EmblaOptionsType,\n  userPlugins?: EmblaPluginType[]\n): EmblaCarouselType {\n  const ownerDocument = root.ownerDocument\n  const ownerWindow = <WindowType>ownerDocument.defaultView\n  const optionsHandler = OptionsHandler(ownerWindow)\n  const pluginsHandler = PluginsHandler(optionsHandler)\n  const mediaHandlers = EventStore()\n  const eventHandler = EventHandler()\n  const { mergeOptions, optionsAtMedia, optionsMediaQueries } = optionsHandler\n  const { on, off, emit } = eventHandler\n  const reInit = reActivate\n\n  let destroyed = false\n  let engine: EngineType\n  let optionsBase = mergeOptions(defaultOptions, EmblaCarousel.globalOptions)\n  let options = mergeOptions(optionsBase)\n  let pluginList: EmblaPluginType[] = []\n  let pluginApis: EmblaPluginsType\n\n  let container: HTMLElement\n  let slides: HTMLElement[]\n\n  function storeElements(): void {\n    const { container: userContainer, slides: userSlides } = options\n\n    const customContainer = isString(userContainer)\n      ? root.querySelector(userContainer)\n      : userContainer\n    container = <HTMLElement>(customContainer || root.children[0])\n\n    const customSlides = isString(userSlides)\n      ? container.querySelectorAll(userSlides)\n      : userSlides\n    slides = <HTMLElement[]>[].slice.call(customSlides || container.children)\n  }\n\n  function createEngine(options: OptionsType): EngineType {\n    const engine = Engine(\n      root,\n      container,\n      slides,\n      ownerDocument,\n      ownerWindow,\n      options,\n      eventHandler\n    )\n\n    if (options.loop && !engine.slideLooper.canLoop()) {\n      const optionsWithoutLoop = Object.assign({}, options, { loop: false })\n      return createEngine(optionsWithoutLoop)\n    }\n    return engine\n  }\n\n  function activate(\n    withOptions?: EmblaOptionsType,\n    withPlugins?: EmblaPluginType[]\n  ): void {\n    if (destroyed) return\n\n    optionsBase = mergeOptions(optionsBase, withOptions)\n    options = optionsAtMedia(optionsBase)\n    pluginList = withPlugins || pluginList\n\n    storeElements()\n\n    engine = createEngine(options)\n\n    optionsMediaQueries([\n      optionsBase,\n      ...pluginList.map(({ options }) => options)\n    ]).forEach((query) => mediaHandlers.add(query, 'change', reActivate))\n\n    if (!options.active) return\n\n    engine.translate.to(engine.location.get())\n    engine.animation.init()\n    engine.slidesInView.init()\n    engine.slideFocus.init(self)\n    engine.eventHandler.init(self)\n    engine.resizeHandler.init(self)\n    engine.slidesHandler.init(self)\n\n    if (engine.options.loop) engine.slideLooper.loop()\n    if (container.offsetParent && slides.length) engine.dragHandler.init(self)\n\n    pluginApis = pluginsHandler.init(self, pluginList)\n  }\n\n  function reActivate(\n    withOptions?: EmblaOptionsType,\n    withPlugins?: EmblaPluginType[]\n  ): void {\n    const startIndex = selectedScrollSnap()\n    deActivate()\n    activate(mergeOptions({ startIndex }, withOptions), withPlugins)\n    eventHandler.emit('reInit')\n  }\n\n  function deActivate(): void {\n    engine.dragHandler.destroy()\n    engine.eventStore.clear()\n    engine.translate.clear()\n    engine.slideLooper.clear()\n    engine.resizeHandler.destroy()\n    engine.slidesHandler.destroy()\n    engine.slidesInView.destroy()\n    engine.animation.destroy()\n    pluginsHandler.destroy()\n    mediaHandlers.clear()\n  }\n\n  function destroy(): void {\n    if (destroyed) return\n    destroyed = true\n    mediaHandlers.clear()\n    deActivate()\n    eventHandler.emit('destroy')\n    eventHandler.clear()\n  }\n\n  function scrollTo(index: number, jump?: boolean, direction?: number): void {\n    if (!options.active || destroyed) return\n    engine.scrollBody\n      .useBaseFriction()\n      .useDuration(jump === true ? 0 : options.duration)\n    engine.scrollTo.index(index, direction || 0)\n  }\n\n  function scrollNext(jump?: boolean): void {\n    const next = engine.index.add(1).get()\n    scrollTo(next, jump, -1)\n  }\n\n  function scrollPrev(jump?: boolean): void {\n    const prev = engine.index.add(-1).get()\n    scrollTo(prev, jump, 1)\n  }\n\n  function canScrollNext(): boolean {\n    const next = engine.index.add(1).get()\n    return next !== selectedScrollSnap()\n  }\n\n  function canScrollPrev(): boolean {\n    const prev = engine.index.add(-1).get()\n    return prev !== selectedScrollSnap()\n  }\n\n  function scrollSnapList(): number[] {\n    return engine.scrollSnapList\n  }\n\n  function scrollProgress(): number {\n    return engine.scrollProgress.get(engine.offsetLocation.get())\n  }\n\n  function selectedScrollSnap(): number {\n    return engine.index.get()\n  }\n\n  function previousScrollSnap(): number {\n    return engine.indexPrevious.get()\n  }\n\n  function slidesInView(): number[] {\n    return engine.slidesInView.get()\n  }\n\n  function slidesNotInView(): number[] {\n    return engine.slidesInView.get(false)\n  }\n\n  function plugins(): EmblaPluginsType {\n    return pluginApis\n  }\n\n  function internalEngine(): EngineType {\n    return engine\n  }\n\n  function rootNode(): HTMLElement {\n    return root\n  }\n\n  function containerNode(): HTMLElement {\n    return container\n  }\n\n  function slideNodes(): HTMLElement[] {\n    return slides\n  }\n\n  const self: EmblaCarouselType = {\n    canScrollNext,\n    canScrollPrev,\n    containerNode,\n    internalEngine,\n    destroy,\n    off,\n    on,\n    emit,\n    plugins,\n    previousScrollSnap,\n    reInit,\n    rootNode,\n    scrollNext,\n    scrollPrev,\n    scrollProgress,\n    scrollSnapList,\n    scrollTo,\n    selectedScrollSnap,\n    slideNodes,\n    slidesInView,\n    slidesNotInView\n  }\n\n  activate(userOptions, userPlugins)\n  setTimeout(() => eventHandler.emit('init'), 0)\n  return self\n}\n\ndeclare namespace EmblaCarousel {\n  let globalOptions: EmblaOptionsType | undefined\n}\n\nEmblaCarousel.globalOptions = undefined\n\nexport default EmblaCarousel\n", "import { CreateOptionsType, EmblaCarouselType } from 'embla-carousel'\n\nexport type DelayOptionType =\n  | number\n  | ((scrollSnaps: number[], emblaApi: EmblaCarouselType) => number[])\n\nexport type RootNodeType =\n  | null\n  | ((emblaRoot: HTMLElement) => HTMLElement | null)\n\nexport type OptionsType = CreateOptionsType<{\n  delay: DelayOptionType\n  jump: boolean\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: RootNodeType\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n}\n", "import { EmblaCarouselType } from 'embla-carousel/components/EmblaCarousel'\nimport { DelayOptionType, RootNodeType } from './Options'\n\nexport function normalizeDelay(\n  emblaApi: EmblaCarouselType,\n  delay: DelayOptionType\n): number[] {\n  const scrollSnaps = emblaApi.scrollSnapList()\n\n  if (typeof delay === 'number') {\n    return scrollSnaps.map(() => delay)\n  }\n  return delay(scrollSnaps, emblaApi)\n}\n\nexport function getAutoplayRootNode(\n  emblaApi: EmblaCarouselType,\n  rootNode: RootNodeType\n): HTMLElement {\n  const emblaRootNode = emblaApi.rootNode()\n  return (rootNode && rootNode(emblaRootNode)) || emblaRootNode\n}\n", "import { OptionsType, defaultOptions } from './Options'\nimport { getAutoplayRootNode, normalizeDelay } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    autoplay: AutoplayType\n  }\n\n  interface EmblaEventListType {\n    autoplayPlay: 'autoplay:play'\n    autoplayStop: 'autoplay:stop'\n    autoplaySelect: 'autoplay:select'\n    autoplayTimerSet: 'autoplay:timerset'\n    autoplayTimerStopped: 'autoplay:timerstopped'\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n    timeUntilNext: () => number | null\n  },\n  OptionsType\n>\n\nexport type AutoplayOptionsType = AutoplayType['options']\n\nfunction Autoplay(userOptions: AutoplayOptionsType = {}): AutoplayType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let delay: ReturnType<EmblaCarouselType['scrollSnapList']>\n  let timerStartTime: null | number = null\n  let timerId = 0\n  let autoplayActive = false\n  let mouseIsOver = false\n  let playOnDocumentVisible = false\n  let jump = false\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    jump = options.jump\n    destroyed = false\n    delay = normalizeDelay(emblaApi, options.delay)\n\n    const { eventStore, ownerDocument } = emblaApi.internalEngine()\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag\n    const root = getAutoplayRootNode(emblaApi, options.rootNode)\n\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange)\n\n    if (isDraggable) {\n      emblaApi.on('pointerDown', pointerDown)\n    }\n\n    if (isDraggable && !options.stopOnInteraction) {\n      emblaApi.on('pointerUp', pointerUp)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', mouseEnter)\n    }\n\n    if (options.stopOnMouseEnter && !options.stopOnInteraction) {\n      eventStore.add(root, 'mouseleave', mouseLeave)\n    }\n\n    if (options.stopOnFocusIn) {\n      emblaApi.on('slideFocusStart', stopAutoplay)\n    }\n\n    if (options.stopOnFocusIn && !options.stopOnInteraction) {\n      eventStore.add(emblaApi.containerNode(), 'focusout', startAutoplay)\n    }\n\n    if (options.playOnInit) startAutoplay()\n  }\n\n  function destroy(): void {\n    emblaApi\n      .off('pointerDown', pointerDown)\n      .off('pointerUp', pointerUp)\n      .off('slideFocusStart', stopAutoplay)\n\n    stopAutoplay()\n    destroyed = true\n    autoplayActive = false\n  }\n\n  function setTimer(): void {\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearTimeout(timerId)\n    timerId = ownerWindow.setTimeout(next, delay[emblaApi.selectedScrollSnap()])\n    timerStartTime = new Date().getTime()\n    emblaApi.emit('autoplay:timerset')\n  }\n\n  function clearTimer(): void {\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearTimeout(timerId)\n    timerId = 0\n    timerStartTime = null\n    emblaApi.emit('autoplay:timerstopped')\n  }\n\n  function startAutoplay(): void {\n    if (destroyed) return\n    if (documentIsHidden()) {\n      playOnDocumentVisible = true\n      return\n    }\n    if (!autoplayActive) emblaApi.emit('autoplay:play')\n\n    setTimer()\n    autoplayActive = true\n  }\n\n  function stopAutoplay(): void {\n    if (destroyed) return\n    if (autoplayActive) emblaApi.emit('autoplay:stop')\n\n    clearTimer()\n    autoplayActive = false\n  }\n\n  function visibilityChange(): void {\n    if (documentIsHidden()) {\n      playOnDocumentVisible = autoplayActive\n      return stopAutoplay()\n    }\n\n    if (playOnDocumentVisible) startAutoplay()\n  }\n\n  function documentIsHidden(): boolean {\n    const { ownerDocument } = emblaApi.internalEngine()\n    return ownerDocument.visibilityState === 'hidden'\n  }\n\n  function pointerDown(): void {\n    if (!mouseIsOver) stopAutoplay()\n  }\n\n  function pointerUp(): void {\n    if (!mouseIsOver) startAutoplay()\n  }\n\n  function mouseEnter(): void {\n    mouseIsOver = true\n    stopAutoplay()\n  }\n\n  function mouseLeave(): void {\n    mouseIsOver = false\n    startAutoplay()\n  }\n\n  function play(jumpOverride?: boolean): void {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    startAutoplay()\n  }\n\n  function stop(): void {\n    if (autoplayActive) stopAutoplay()\n  }\n\n  function reset(): void {\n    if (autoplayActive) startAutoplay()\n  }\n\n  function isPlaying(): boolean {\n    return autoplayActive\n  }\n\n  function next(): void {\n    const { index } = emblaApi.internalEngine()\n    const nextIndex = index.clone().add(1).get()\n    const lastIndex = emblaApi.scrollSnapList().length - 1\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex\n\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump)\n    } else {\n      emblaApi.scrollTo(0, jump)\n    }\n\n    emblaApi.emit('autoplay:select')\n\n    if (kill) return stopAutoplay()\n    startAutoplay()\n  }\n\n  function timeUntilNext(): number | null {\n    if (!timerStartTime) return null\n    const currentDelay = delay[emblaApi.selectedScrollSnap()]\n    const timePastSinceStart = new Date().getTime() - timerStartTime\n    return currentDelay - timePastSinceStart\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying,\n    timeUntilNext\n  }\n  return self\n}\n\ndeclare namespace Autoplay {\n  let globalOptions: AutoplayOptionsType | undefined\n}\n\nAutoplay.globalOptions = undefined\n\nexport default Autoplay\n", "import { CreateOptionsType } from 'embla-carousel'\n\nexport type ClassNameOptionType = string | string[]\n\nexport type ClassNamesListType = {\n  snapped: string[]\n  inView: string[]\n  draggable: string[]\n  dragging: string[]\n  loop: string[]\n}\n\nexport type OptionsType = CreateOptionsType<{\n  [Key in keyof ClassNamesListType]: ClassNameOptionType\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n  loop: 'is-loop'\n}\n", "import { ClassNameOptionType } from './Options'\n\nexport function normalizeClassNames(classNames: ClassNameOptionType): string[] {\n  const normalized = Array.isArray(classNames) ? classNames : [classNames]\n  return normalized.filter(Boolean)\n}\n\nexport function removeClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n  node.classList.remove(...classNames)\n}\n\nexport function addClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n  node.classList.add(...classNames)\n}\n", "import { defaultOptions, OptionsType, ClassNamesListType } from './Options'\nimport { addClass, normalizeClassNames, removeClass } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType,\n  EmblaEventType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    classNames: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  let snappedIndexes: number[] = []\n  let inViewIndexes: number[] = []\n\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n  const classNames: ClassNamesListType = {\n    snapped: [],\n    inView: [],\n    draggable: [],\n    dragging: [],\n    loop: []\n  }\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n\n    const { watchDrag, loop } = emblaApi.internalEngine().options\n    const isDraggable = !!watchDrag\n\n    if (options.loop && loop) {\n      classNames.loop = normalizeClassNames(options.loop)\n      addClass(root, classNames.loop)\n    }\n\n    if (options.draggable && isDraggable) {\n      classNames.draggable = normalizeClassNames(options.draggable)\n      addClass(root, classNames.draggable)\n    }\n\n    if (options.dragging) {\n      classNames.dragging = normalizeClassNames(options.dragging)\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n\n    if (options.snapped) {\n      classNames.snapped = normalizeClassNames(options.snapped)\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n\n    if (options.inView) {\n      classNames.inView = normalizeClassNames(options.inView)\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n\n    removeClass(root, classNames.loop)\n    removeClass(root, classNames.draggable)\n    removeClass(root, classNames.dragging)\n    toggleSlideClasses([], snappedIndexes, classNames.snapped)\n    toggleSlideClasses([], inViewIndexes, classNames.inView)\n\n    Object.keys(classNames).forEach((classNameKey) => {\n      const key = <keyof ClassNamesListType>classNameKey\n      classNames[key] = []\n    })\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    const toggleClass = evt === 'pointerDown' ? addClass : removeClass\n    toggleClass(root, classNames.dragging)\n  }\n\n  function toggleSlideClasses(\n    addClassIndexes: number[] = [],\n    removeClassIndexes: number[] = [],\n    classNames: string[]\n  ): number[] {\n    const removeClassSlides = removeClassIndexes.map((index) => slides[index])\n    const addClassSlides = addClassIndexes.map((index) => slides[index])\n\n    removeClassSlides.forEach((slide) => removeClass(slide, classNames))\n    addClassSlides.forEach((slide) => addClass(slide, classNames))\n\n    return addClassIndexes\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const newSnappedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    snappedIndexes = toggleSlideClasses(\n      newSnappedIndexes,\n      snappedIndexes,\n      classNames.snapped\n    )\n  }\n\n  function toggleInViewClasses(): void {\n    const newInViewIndexes = emblaApi.slidesInView()\n\n    inViewIndexes = toggleSlideClasses(\n      newInViewIndexes,\n      inViewIndexes,\n      classNames.inView\n    )\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace ClassNames {\n  let globalOptions: ClassNamesOptionsType | undefined\n}\n\nClassNames.globalOptions = undefined\n\nexport default ClassNames\n", "/**\n * Embla Carousel ES Module\n * \n * Automatically initializes Embla Carousel for elements with .block-carousel class.\n * Detects .kt-row-column-wrap containers and treats .wp-block-kadence-column children as slides.\n * \n * Features:\n * - CSS class activation: .auto-play, .loop, .no-loop\n * - Data attribute customization: data-carousel-* attributes\n * - Automatic initialization on DOM ready\n * - Responsive and accessible\n * \n * @author TTN Theme\n * @version 1.1.0\n */\n\nimport EmblaCarousel from 'embla-carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport ClassNames from 'embla-carousel-class-names';\n\n/**\n * Carousel Manager Class\n * Handles initialization, configuration, and cleanup of Embla Carousel instances\n */\nclass CarouselManager {\n    constructor() {\n        this.instances = new Map();\n        this.defaultOptions = {\n            loop: true,\n            draggable: true,\n            align: 'start',\n            skipSnaps: false,\n            containScroll: 'trimSnaps',\n            dragFree: false,\n            slidesToScroll: 1,\n            inViewThreshold: 0.7\n        };\n        \n        /* Base plugins that are always included */\n        this.basePlugins = [\n            ClassNames({\n                selected: 'is-selected',\n                dragging: 'is-dragging'\n            })\n        ];\n    }\n\n    /**\n     * Detection Logic\n     * \n     * Searches for elements with .block-carousel class and:\n     * 1. Locates descendant .kt-row-column-wrap container\n     * 2. Treats each .wp-block-kadence-column child as a slide\n     * 3. Creates carousel container structure if needed\n     */\n    detectCarousels() {\n        const carouselElements = document.querySelectorAll('.block-carousel');\n        const detectedCarousels = [];\n\n        carouselElements.forEach((element, index) => {\n            /* Find the container with columns */\n            const container = element.querySelector('.kt-row-column-wrap');\n            \n            if (!container) {\n                console.warn(`Carousel ${index + 1}: No .kt-row-column-wrap container found`);\n                return;\n            }\n\n            /* Get all column elements that will become slides */\n            const slides = container.querySelectorAll('.wp-block-kadence-column');\n            \n            if (slides.length === 0) {\n                console.warn(`Carousel ${index + 1}: No .wp-block-kadence-column slides found`);\n                return;\n            }\n\n            /* Skip if already initialized */\n            if (element.hasAttribute('data-embla-initialized')) {\n                return;\n            }\n\n            detectedCarousels.push({\n                element,\n                container,\n                slides: Array.from(slides),\n                id: `carousel-${index + 1}`\n            });\n        });\n\n        return detectedCarousels;\n    }\n\n    /**\n     * Setup Carousel Structure\n     * \n     * Creates the required Embla Carousel DOM structure:\n     * - .embla container\n     * - .embla__viewport\n     * - .embla__container\n     * - Individual slide wrappers\n     */\n    setupCarouselStructure(carouselData) {\n        const { element, container, slides } = carouselData;\n\n        /* Create Embla structure */\n        const emblaContainer = document.createElement('div');\n        emblaContainer.className = 'embla';\n        emblaContainer.setAttribute('data-embla-carousel', '');\n\n        const viewport = document.createElement('div');\n        viewport.className = 'embla__viewport';\n\n        const emblaContainerInner = document.createElement('div');\n        emblaContainerInner.className = 'embla__container';\n\n        /* Wrap each slide in embla__slide */\n        slides.forEach((slide) => {\n            const slideWrapper = document.createElement('div');\n            slideWrapper.className = 'embla__slide';\n            slideWrapper.appendChild(slide.cloneNode(true));\n            emblaContainerInner.appendChild(slideWrapper);\n        });\n\n        /* Hide original container and append new structure */\n        container.style.display = 'none';\n        viewport.appendChild(emblaContainerInner);\n        emblaContainer.appendChild(viewport);\n        element.appendChild(emblaContainer);\n\n        return {\n            emblaContainer,\n            viewport,\n            container: emblaContainerInner\n        };\n    }\n\n    /**\n     * Initialize Single Carousel\n     * \n     * Sets up a single carousel instance with plugins and event handlers\n     */\n    initializeCarousel(carouselData) {\n        try {\n            const structure = this.setupCarouselStructure(carouselData);\n            const { emblaContainer, viewport } = structure;\n\n            /* Merge default options with any custom options from data attributes */\n            const customOptions = this.parseCustomOptions(carouselData.element);\n            const options = { ...this.defaultOptions, ...customOptions };\n\n            /* Parse items per slide configuration */\n            const itemsPerSlide = this.parseItemsPerSlide(carouselData.element);\n            \n            /* Apply responsive CSS classes based on items per slide */\n            this.applyItemsPerSlideClasses(carouselData.element, itemsPerSlide);\n\n            /* Create plugins for this specific carousel */\n            const plugins = this.createPluginsForCarousel(carouselData.element);\n\n            /* Initialize Embla Carousel */\n            const embla = EmblaCarousel(viewport, options, plugins);\n\n            /* Store instance for cleanup */\n            this.instances.set(carouselData.id, {\n                embla,\n                element: carouselData.element,\n                structure\n            });\n\n            /* Add initialization marker */\n            carouselData.element.setAttribute('data-embla-initialized', 'true');\n\n            /* Setup event handlers */\n            this.setupEventHandlers(embla, carouselData.element);\n\n            console.log(`Carousel ${carouselData.id} initialized successfully`);\n\n            return embla;\n\n        } catch (error) {\n            console.error(`Failed to initialize carousel ${carouselData.id}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Create Plugins Array for Specific Carousel\n     * \n     * Dynamically creates plugins based on element classes and data attributes\n     */\n    createPluginsForCarousel(element) {\n        const plugins = [...this.basePlugins];\n        const dataset = element.dataset;\n        \n        /* Check for autoplay activation */\n        let autoplayDelay = 4000; /* Default delay */\n        let enableAutoplay = false;\n        \n        /* Check CSS class first */\n        if (element.classList.contains('auto-play')) {\n            enableAutoplay = true;\n        }\n        \n        /* Check data attribute (can override class) */\n        if (dataset.carouselAutoplay) {\n            const delay = parseInt(dataset.carouselAutoplay, 10);\n            if (!isNaN(delay) && delay > 0) {\n                enableAutoplay = true;\n                autoplayDelay = delay;\n            }\n        }\n        \n        /* Add autoplay plugin if enabled */\n        if (enableAutoplay) {\n            plugins.push(Autoplay({ \n                delay: autoplayDelay, \n                stopOnInteraction: false \n            }));\n        }\n        \n        return plugins;\n    }\n\n    /**\n     * Parse Items Per Slide from CSS Classes\n     * \n     * Checks for classes that control how many items are displayed per slide:\n     * - .carousel-2-items, .carousel-3-items, .carousel-4-items (desktop)\n     * - .carousel-sm-2-items, .carousel-sm-3-items, .carousel-sm-4-items (mobile)\n     * - Defaults to 1 item per slide if no classes are found\n     */\n    parseItemsPerSlide(element) {\n        const itemsPerSlide = {\n            desktop: 1,\n            mobile: 1\n        };\n\n        /* Check for desktop items per slide classes */\n        if (element.classList.contains('carousel-2-items')) {\n            itemsPerSlide.desktop = 2;\n        } else if (element.classList.contains('carousel-3-items')) {\n            itemsPerSlide.desktop = 3;\n        } else if (element.classList.contains('carousel-4-items')) {\n            itemsPerSlide.desktop = 4;\n        }\n\n        /* Check for mobile items per slide classes */\n        if (element.classList.contains('carousel-sm-2-items')) {\n            itemsPerSlide.mobile = 2;\n        } else if (element.classList.contains('carousel-sm-3-items')) {\n            itemsPerSlide.mobile = 3;\n        } else if (element.classList.contains('carousel-sm-4-items')) {\n            itemsPerSlide.mobile = 4;\n        }\n\n        return itemsPerSlide;\n    }\n\n    /**\n     * Apply CSS Classes for Items Per Slide Configuration\n     * \n     * Adds responsive CSS classes to the carousel element and slides\n     * to control how many items are displayed per slide\n     */\n    applyItemsPerSlideClasses(element, itemsPerSlide) {\n        const { desktop, mobile } = itemsPerSlide;\n        \n        /* Add data attributes for CSS targeting */\n        element.setAttribute('data-items-desktop', desktop);\n        element.setAttribute('data-items-mobile', mobile);\n        \n        /* Add CSS classes for responsive behavior */\n        element.classList.add(`carousel-items-${desktop}`);\n        element.classList.add(`carousel-items-sm-${mobile}`);\n        \n        /* Apply CSS custom properties for dynamic styling */\n        element.style.setProperty('--carousel-items-desktop', desktop);\n        element.style.setProperty('--carousel-items-mobile', mobile);\n        \n        /* Add responsive classes to slides */\n        const slides = element.querySelectorAll('.embla__slide');\n        slides.forEach(slide => {\n            slide.classList.add(`slide-items-${desktop}`);\n            slide.classList.add(`slide-items-sm-${mobile}`);\n        });\n    }\n\n    /**\n     * Parse Custom Options from Data Attributes and CSS Classes\n     * \n     * Allows customization via:\n     * - Data attributes: data-carousel-loop=\"false\", data-carousel-draggable=\"false\", etc.\n     * - CSS classes: .auto-play, .loop on .block-carousel element\n     */\n    parseCustomOptions(element) {\n        const options = {};\n        const dataset = element.dataset;\n\n        /* Check for CSS classes first (higher priority) */\n        if (element.classList.contains('loop')) {\n            options.loop = true;\n        } else if (element.classList.contains('no-loop')) {\n            options.loop = false;\n        }\n\n        /* Parse data attributes (lower priority, can override classes) */\n        if (dataset.carouselLoop !== undefined) {\n            options.loop = dataset.carouselLoop === 'true';\n        }\n\n        if (dataset.carouselDraggable !== undefined) {\n            options.draggable = dataset.carouselDraggable === 'true';\n        }\n\n        /* Parse string options */\n        if (dataset.carouselAlign) {\n            options.align = dataset.carouselAlign;\n        }\n\n        return options;\n    }\n\n    /**\n     * Setup Event Handlers\n     * \n     * Adds common event handlers for carousel functionality\n     */\n    setupEventHandlers(embla, element) {\n        /* Add navigation buttons if they exist */\n        const prevButton = element.querySelector('[data-carousel-prev]');\n        const nextButton = element.querySelector('[data-carousel-next]');\n\n        if (prevButton) {\n            prevButton.addEventListener('click', () => embla.scrollPrev());\n        }\n\n        if (nextButton) {\n            nextButton.addEventListener('click', () => embla.scrollNext());\n        }\n\n        /* Add keyboard navigation */\n        element.addEventListener('keydown', (e) => {\n            if (e.target.closest('.embla__slide')) {\n                switch (e.key) {\n                    case 'ArrowLeft':\n                        e.preventDefault();\n                        embla.scrollPrev();\n                        break;\n                    case 'ArrowRight':\n                        e.preventDefault();\n                        embla.scrollNext();\n                        break;\n                }\n            }\n        });\n\n        /* Add accessibility attributes */\n        embla.on('select', () => {\n            const slides = element.querySelectorAll('.embla__slide');\n            slides.forEach((slide, index) => {\n                const isSelected = index === embla.selectedScrollSnap();\n                slide.setAttribute('aria-hidden', !isSelected);\n                slide.setAttribute('tabindex', isSelected ? '0' : '-1');\n            });\n        });\n    }\n\n    /**\n     * Initialize All Carousels\n     * \n     * Main initialization function that detects and sets up all carousels on the page\n     */\n    init() {\n        console.log('Initializing Embla Carousels...');\n\n        const carousels = this.detectCarousels();\n        \n        if (carousels.length === 0) {\n            console.log('No carousels found on the page');\n            return;\n        }\n\n        console.log(`Found ${carousels.length} carousel(s) to initialize`);\n\n        carousels.forEach(carouselData => {\n            this.initializeCarousel(carouselData);\n        });\n\n        console.log('All carousels initialized successfully');\n    }\n\n    /**\n     * Destroy All Carousels\n     * \n     * Cleanup method that removes all carousel instances and restores original DOM\n     */\n    destroy() {\n        console.log('Destroying all carousel instances...');\n\n        this.instances.forEach((instance, id) => {\n            try {\n                /* Destroy Embla instance */\n                instance.embla.destroy();\n\n                /* Restore original container */\n                const originalContainer = instance.element.querySelector('.kt-row-column-wrap');\n                if (originalContainer) {\n                    originalContainer.style.display = '';\n                }\n\n                /* Remove Embla structure */\n                const emblaContainer = instance.element.querySelector('.embla');\n                if (emblaContainer) {\n                    emblaContainer.remove();\n                }\n\n                /* Remove initialization marker */\n                instance.element.removeAttribute('data-embla-initialized');\n\n                console.log(`Carousel ${id} destroyed successfully`);\n\n            } catch (error) {\n                console.error(`Error destroying carousel ${id}:`, error);\n            }\n        });\n\n        this.instances.clear();\n        console.log('All carousels destroyed');\n    }\n\n    /**\n     * Get Carousel Instance\n     * \n     * Returns a specific carousel instance by ID\n     */\n    getInstance(id) {\n        return this.instances.get(id);\n    }\n\n    /**\n     * Get All Instances\n     * \n     * Returns all carousel instances\n     */\n    getAllInstances() {\n        return this.instances;\n    }\n}\n\n/* Create global instance */\nconst carouselManager = new CarouselManager();\n\n/* Auto-initialize on DOM ready */\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => carouselManager.init());\n} else {\n    carouselManager.init();\n}\n\n/* Export for manual usage */\nexport const init = () => carouselManager.init();\nexport const destroy = () => carouselManager.destroy();\nexport const getInstance = (id) => carouselManager.getInstance(id);\nexport const getAllInstances = () => carouselManager.getAllInstances();\n\n/* Default export */\nexport default carouselManager;\n"],
  "mappings": "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7C,UAAMO,WAAW+P,SAASuG,aAAa;AACvC,UAAMzO,mBAAmBkI,SAASuG,aAAa;AAC/C,UAAM1O,iBAAiBmI,SAASuG,aAAa;AAC7C,UAAMxW,SAASiQ,SAASuG,aAAa;AACrC,UAAMnW,aAAawH,WACjB3H,UACA4H,gBACAC,kBACA/H,QACA4I,UACAjE,QAAQ;AAEV,UAAMrE,eAAeiN,aACnBhO,MACAgM,aACAzB,aACAb,OACAjJ,MAAM;AAER,UAAMI,WAAWsO,SACfvO,WACAzG,OACAkV,eACAvO,YACAC,cACAN,QACAO,YAAY;AAEd,UAAMkW,iBAAiB3K,eAAe7C,KAAK;AAC3C,UAAMiG,aAAazT,WAAU;AAC7B,UAAMib,eAAevD,aACnB9M,WACAC,QACA/F,cACAuV,eAAe;AAEjB,UAAM;MAAE9I;IAAa,IAAKH,cACxBC,cACA9C,eACAuB,aACAlB,oBACA8B,gBACAY,YAAY;AAEd,UAAM4J,aAAa3H,WACjBC,MACA3I,QACA0G,eACA5M,UACAC,YACA6O,YACA3O,cACA4O,UAAU;AAIZ,UAAMoH,SAAqB;MACzB5Z;MACA7B;MACAyF;MACA0L;MACAC;MACA/L;MACApC;MACAgY,aAAajW,YACX/B,MACAkR,MACAtS,eACA7B,aACAkF,QACA6E,YAAY9G,MAAMjD,WAAW,GAC7BoF,UACAC,WACAC,UACAC,YACAC,cACA5G,OACA6G,cACAC,eACAC,UACAC,eACAC,WACAgE,UACA9D,SAAS;MAEXqO;MACA1O;MACA9G;MACAkV;MACA3F;MACA/I;MACA4H;MACAC;MACAhM;MACA6a,eAAexQ,cACbC,WACA9F,cACAzF,aACAwL,QACAvI,MACAwI,aACAC,SAAS;MAEXnG;MACA6J,cAAclB,aACZC,OACAnB,gBACA9H,QACAK,YACAG,aAAa;MAEfwV,cAAcxK,aAAa1B,aAAab,OAAOnB,gBAAgB,CAC7D5H,UACA4H,gBACAC,kBACA/H,MAAM,CACP;MACDyW;MACAI,gBAAgBtL,YAAYpS,IAAIsd,eAAe9W,GAAG;MAClD4L;MACAjL;MACAF;MACA6V,aAAahF,YACXlT,MACA7C,UACA4O,aACAj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",
  "names": ["isNumber", "subject", "isString", "isBoolean", "isObject", "Object", "prototype", "toString", "call", "mathAbs", "n", "Math", "abs", "mathSign", "sign", "deltaAbs", "valueB", "valueA", "factorAbs", "diff", "roundToTwoDecimals", "num", "round", "arrayKeys", "array", "objectKeys", "map", "Number", "arrayLast", "arrayLastIndex", "max", "length", "arrayIsLastIndex", "index", "arrayFromNumber", "startAt", "Array", "from", "_", "i", "object", "keys", "objectsMergeDeep", "objectA", "objectB", "reduce", "mergedObjects", "currentObject", "forEach", "key", "areObjects", "isMouseEvent", "evt", "ownerWindow", "MouseEvent", "Alignment", "align", "viewSize", "predefined", "start", "center", "end", "measure", "self", "EventStore", "listeners", "add", "node", "type", "handler", "options", "passive", "removeListener", "addEventListener", "removeEventListener", "legacyMediaQueryList", "addListener", "push", "clear", "filter", "remove", "Animations", "ownerDocument", "update", "render", "documentVisibleHandler", "fixedTimeStep", "lastTimeStamp", "accumulatedTime", "animationId", "init", "hidden", "reset", "destroy", "stop", "animate", "timeStamp", "timeElapsed", "alpha", "requestAnimationFrame", "cancelAnimationFrame", "Axis", "axis", "contentDirection", "isRightToLeft", "isVertical", "scroll", "cross", "startEdge", "getStartEdge", "endEdge", "getEndEdge", "measureSize", "nodeRect", "height", "width", "direction", "Limit", "min", "reachedMin", "reachedMax", "reachedAny", "constrain", "removeOffset", "ceil", "Counter", "loop", "loopEnd", "counter", "withinLimit", "get", "set", "clone", "DragHandler", "rootNode", "target", "dragTracker", "location", "animation", "scrollTo", "scrollBody", "scrollTarget", "eventHandler", "percentOfView", "dragFree", "dragThreshold", "skipSnaps", "baseFriction", "watchDrag", "crossAxis", "focusNodes", "nonPassiveEvent", "initEvents", "dragEvents", "goToNextThreshold", "snapForceBoost", "mouse", "touch", "freeForceBoost", "baseSpeed", "isMoving", "startScroll", "startCross", "pointerIsDown", "preventScroll", "preventClick", "isMouse", "emblaApi", "downIfAllowed", "down", "preventDefault", "undefined", "up", "click", "addDragEvents", "move", "isFocusNode", "nodeName", "includes", "forceBoost", "boost", "allowedForce", "force", "targetChanged", "next", "baseForce", "byDistance", "distance", "byIndex", "isMouseEvt", "buttons", "button", "pointerDown", "useFriction", "useDuration", "readPoint", "emit", "isTouchEvt", "touches", "lastScroll", "lastCross", "diffScroll", "diffCross", "cancelable", "pointerMove", "currentLocation", "rawForce", "pointerUp", "forceFactor", "speed", "friction", "stopPropagation", "DragTracker", "logInterval", "startEvent", "lastEvent", "readTime", "evtAxis", "property", "coord", "expired", "diffDrag", "diffTime", "isFlick", "NodeRects", "offsetTop", "offsetLeft", "offsetWidth", "offsetHeight", "offset", "top", "right", "bottom", "left", "PercentOfView", "ResizeHandler", "container", "slides", "watchResize", "nodeRects", "observeNodes", "concat", "resizeObserver", "containerSize", "slideSizes", "destroyed", "readSize", "defaultCallback", "entries", "entry", "isContainer", "slideIndex", "indexOf", "lastSize", "newSize", "diffSize", "reInit", "ResizeObserver", "observe", "disconnect", "ScrollBody", "offsetLocation", "previousLocation", "baseDuration", "scrollVelocity", "scrollDirection", "scrollDuration", "scrollFriction", "rawLocation", "rawLocationPrevious", "seek", "displacement", "isInstant", "scrollDistance", "settled", "duration", "velocity", "useBaseDuration", "useBaseFriction", "ScrollBounds", "limit", "pullBackThreshold", "edgeOffsetTolerance", "frictionLimit", "disabled", "shouldConstrain", "edge", "diffToEdge", "diffToTarget", "subtract", "toggleActive", "active", "ScrollContain", "contentSize", "snapsAligned", "containScroll", "pixelTolerance", "scrollBounds", "snapsBounded", "measureBounded", "scrollContainLimit", "findScrollContainLimit", "snapsContained", "measureContained", "usePixelTolerance", "bound", "snap", "startSnap", "endSnap", "lastIndexOf", "snapAligned", "isFirst", "isLast", "scrollBound", "parseFloat", "toFixed", "slice", "ScrollLimit", "scrollSnaps", "ScrollLooper", "vectors", "jointSafety", "shouldLoop", "loopDistance", "v", "ScrollProgress", "ScrollSnaps", "alignment", "containerRect", "slideRects", "slidesToScroll", "groupSlides", "alignments", "measureSizes", "snaps", "measureUnaligned", "measureAligned", "rects", "rect", "g", "SlideRegistry", "containSnaps", "slideIndexes", "slideRegistry", "createSlideRegistry", "groupedSlideIndexes", "doNotContain", "group", "groups", "range", "ScrollTarget", "targetVector", "minDistance", "distances", "sort", "a", "b", "findTargetSnap", "ascDiffsToSnaps", "shortcut", "d1", "d2", "targets", "matchingTargets", "t", "diffToSnap", "targetSnapDistance", "reachedBound", "snapDistance", "ScrollTo", "indexCurrent", "indexPrevious", "distanceDiff", "indexDiff", "targetIndex", "SlideFocus", "root", "eventStore", "watchFocus", "focusListenerOptions", "capture", "lastTabPressTime", "nowTime", "Date", "getTime", "scrollLeft", "findIndex", "document", "registerTabPress", "slide", "event", "code", "Vector1D", "initialValue", "value", "normalizeInput", "Translate", "translate", "x", "y", "containerStyle", "style", "previousTarget", "to", "newTarget", "transform", "getAttribute", "removeAttribute", "SlideLooper", "slideSizesWithGaps", "roundingSafety", "ascItems", "descItems", "reverse", "loopPoints", "startPoints", "endPoints", "removeSlideSizes", "indexes", "slidesInGap", "gap", "remainingGap", "findSlideBounds", "findLoopPoints", "isEndEdge", "slideBounds", "initial", "altered", "boundEdge", "loopPoint", "slideLocation", "canLoop", "every", "otherIndexes", "shiftLocation", "SlidesHandler", "watchSlides", "mutationObserver", "mutations", "mutation", "MutationObserver", "childList", "SlidesInView", "threshold", "intersectionEntryMap", "inViewCache", "notInViewCache", "intersectionObserver", "IntersectionObserver", "parentElement", "createInViewList", "inView", "list", "parseInt", "isIntersecting", "inViewMatch", "notInViewMatch", "SlideSizes", "readEdgeGap", "withEdgeGap", "startGap", "measureStartGap", "endGap", "measureEndGap", "measureWithGaps", "slideRect", "getComputedStyle", "getPropertyValue", "SlidesToScroll", "groupByNumber", "byNumber", "groupSize", "bySize", "rectB", "rectA", "edgeA", "edgeB", "gapA", "gapB", "chunkSize", "currentSize", "previousSize", "Engine", "scrollAxis", "startIndex", "inViewThreshold", "dragHandler", "scrollLooper", "slideLooper", "shouldSettle", "withinBounds", "hasSettled", "hasSettledAndIdle", "interpolatedLocation", "engine", "startLocation", "scrollProgress", "slidesInView", "slideFocus", "resizeHandler", "scrollSnapList", "slidesHandler", "EventHandler", "api", "getListeners", "e", "on", "cb", "off", "defaultOptions", "breakpoints", "OptionsHandler", "mergeOptions", "optionsA", "optionsB", "optionsAtMedia", "matchedMediaOptions", "media", "matchMedia", "matches", "mediaOption", "optionsMediaQueries", "optionsList", "acc", "mediaQueries", "PluginsHandler", "optionsHandler", "activePlugins", "plugins", "plugin", "assign", "name", "EmblaCarousel", "userOptions", "userPlugins", "defaultView", "pluginsHandler", "mediaHandlers", "reActivate", "optionsBase", "globalOptions", "pluginList", "pluginApis", "storeElements", "userContainer", "userSlides", "customContainer", "querySelector", "children", "customSlides", "querySelectorAll", "createEngine", "optionsWithoutLoop", "activate", "withOptions", "withPlugins", "query", "offsetParent", "selectedScrollSnap", "deActivate", "jump", "scrollNext", "scrollPrev", "prev", "canScrollNext", "canScrollPrev", "previousScrollSnap", "slidesNotInView", "internalEngine", "containerNode", "slideNodes", "setTimeout", "defaultOptions", "active", "breakpoints", "delay", "jump", "playOnInit", "stopOnFocusIn", "stopOnInteraction", "stopOnMouseEnter", "stopOnLastSnap", "rootNode", "normalizeDelay", "emblaApi", "scrollSnaps", "scrollSnapList", "map", "getAutoplayRootNode", "emblaRootNode", "Autoplay", "userOptions", "options", "destroyed", "timerStartTime", "timerId", "autoplayActive", "mouseIsOver", "playOnDocumentVisible", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "length", "eventStore", "ownerDocument", "internalEngine", "isDraggable", "watchDrag", "root", "add", "visibilityChange", "on", "pointerDown", "pointerUp", "mouseEnter", "mouseLeave", "stopAutoplay", "containerNode", "startAutoplay", "destroy", "off", "setTimer", "ownerWindow", "clearTimeout", "setTimeout", "next", "selectedScrollSnap", "Date", "getTime", "emit", "clearTimer", "documentIsHidden", "visibilityState", "play", "jumpOverride", "stop", "reset", "isPlaying", "index", "nextIndex", "clone", "get", "lastIndex", "kill", "canScrollNext", "scrollNext", "scrollTo", "timeUntilNext", "currentDelay", "timePastSinceStart", "self", "name", "undefined", "defaultOptions", "active", "breakpoints", "snapped", "inView", "draggable", "dragging", "loop", "normalizeClassNames", "classNames", "normalized", "Array", "isArray", "filter", "Boolean", "removeClass", "node", "length", "classList", "remove", "addClass", "add", "ClassNames", "userOptions", "options", "emblaApi", "root", "slides", "snappedIndexes", "inViewIndexes", "selectedEvents", "draggingEvents", "inViewEvents", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "rootNode", "slideNodes", "watchDrag", "internalEngine", "isDraggable", "forEach", "evt", "on", "toggleDraggingClass", "toggleSnappedClasses", "toggleInViewClasses", "destroy", "off", "toggleSlideClasses", "Object", "keys", "classNameKey", "key", "_", "toggleClass", "addClassIndexes", "removeClassIndexes", "removeClassSlides", "map", "index", "addClassSlides", "slide", "slideRegistry", "newSnappedIndexes", "selectedScrollSnap", "newInViewIndexes", "slidesInView", "self", "name", "undefined"]
}
